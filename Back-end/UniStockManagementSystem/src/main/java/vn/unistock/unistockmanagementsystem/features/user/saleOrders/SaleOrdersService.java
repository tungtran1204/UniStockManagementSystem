package vn.unistock.unistockmanagementsystem.features.user.saleOrders;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;
import vn.unistock.unistockmanagementsystem.entities.Partner;
import vn.unistock.unistockmanagementsystem.entities.SalesOrder;
import vn.unistock.unistockmanagementsystem.entities.SalesOrderDetail;
import vn.unistock.unistockmanagementsystem.features.user.partner.PartnerRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class SaleOrdersService {
    private final SaleOrdersRepository saleOrdersRepository;
    private final SaleOrdersMapper saleOrdersMapper;
    private final PartnerRepository partnerRepository;


    public SaleOrdersService(SaleOrdersRepository saleOrdersRepository, SaleOrdersMapper saleOrdersMapper, PartnerRepository partnerRepository) {
        this.saleOrdersRepository = saleOrdersRepository;
        this.saleOrdersMapper = saleOrdersMapper;
        this.partnerRepository = partnerRepository;
    }

    /**
     * L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng
     */
    public Page<SaleOrdersDTO> getAllOrders(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<SalesOrder> salesOrderPage = saleOrdersRepository.findAll(pageable);
        return salesOrderPage.map(saleOrdersMapper::toDTO);
    }

    public String getNextOrderCode() {

        Long maxId = saleOrdersRepository.findMaxOrderId(); // SELECT MAX(order_id)
        Long nextId = (maxId != null ? maxId : 0L) + 1;
        return String.format("ƒêH%05d", nextId);
    }

    public SaleOrdersDTO getOrderById(Long orderId) {
        SalesOrder saleOrder = saleOrdersRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Order not found with ID: " + orderId));
        return saleOrdersMapper.toDTO(saleOrder);
    }

    /**
     * L·∫•y chi ti·∫øt ƒë∆°n h√†ng k√®m s·∫£n ph·∫©m theo ID cho popup
     */
    public SaleOrdersDTO getOrderDetail(Long orderId) {
        // L·∫•y ƒë∆°n h√†ng t·ª´ repository
        SalesOrder salesOrder = saleOrdersRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Order not found with ID: " + orderId));

        // Chuy·ªÉn ƒë·ªïi sang DTO
        SaleOrdersDTO orderDTO = saleOrdersMapper.toDTO(salesOrder);

        // L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m
        Set<SalesOrderDetailDTO> detailDTOs = salesOrder.getDetails().stream()
                .map(detail -> {
                    SalesOrderDetailDTO detailDTO = new SalesOrderDetailDTO();
                    detailDTO.setOrderDetailId(detail.getOrderDetailId());
                    detailDTO.setProductId(detail.getProduct().getProductId());
                    detailDTO.setProductName(detail.getProduct().getProductName());
                    detailDTO.setQuantity(detail.getQuantity());
                    detailDTO.setUnitName(detail.getProduct().getUnit().getUnitName());
                    return detailDTO;
                })
                .collect(Collectors.toSet());

        // G√°n chi ti·∫øt v√†o DTO
        orderDTO.setOrderDetails(detailDTOs);

        return orderDTO;
    }

    /**
     * T·∫°o m·ªõi m·ªôt ƒë∆°n h√†ng
     */
    @Transactional
    public SaleOrdersDTO createOrder(SaleOrdersDTO orderDTO) {
        System.out.println("üìù D·ªØ li·ªáu nh·∫≠n t·ª´ frontend: " + orderDTO);

        if (orderDTO.getPartnerName() == null || orderDTO.getPartnerName().trim().isEmpty()) {
            System.out.println("üö® L·ªói: T√™n kh√°ch h√†ng b·ªã thi·∫øu!");
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }

        if (orderDTO.getOrderDetails() == null || orderDTO.getOrderDetails().isEmpty()) {
            System.out.println("üö® L·ªói: ƒê∆°n h√†ng kh√¥ng c√≥ s·∫£n ph·∫©m!");
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "ƒê∆°n h√†ng ph·∫£i c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m.");
        }

        Partner partner;
        if (orderDTO.getPartnerId() != null) {
            partner = partnerRepository.findByPartnerName(orderDTO.getPartnerName())
                    .orElseThrow(() -> {
                        System.out.println("üö® L·ªói: Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng " + orderDTO.getPartnerName());
                        return new ResponseStatusException(HttpStatus.BAD_REQUEST, "Kh√°ch h√†ng kh√¥ng t·ªìn t·∫°i.");
                    });
        } else {
            System.out.println("‚úÖ T·∫°o kh√°ch h√†ng m·ªõi: " + orderDTO.getPartnerName());
            partner = new Partner();
            partner.setPartnerName(orderDTO.getPartnerName());
            partner = partnerRepository.save(partner);
        }

        System.out.println("‚úÖ L∆∞u ƒë∆°n h√†ng v·ªõi d·ªØ li·ªáu: " + orderDTO);

        // Th√™m log ki·ªÉm tra danh s√°ch s·∫£n ph·∫©m
        System.out.println("üìù Danh s√°ch s·∫£n ph·∫©m:");
        for (SalesOrderDetailDTO detail : orderDTO.getOrderDetails()) {
            System.out.println("üîπ Product ID: " + detail.getProductId() + ", Quantity: " + detail.getQuantity());
        }

        SalesOrder newOrder = saleOrdersMapper.toEntity(orderDTO);

        // Ki·ªÉm tra n·∫øu orderDetails ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o
        if (newOrder.getDetails() == null) {
            newOrder.setDetails(new ArrayList<>()); // Kh·ªüi t·∫°o danh s√°ch chi ti·∫øt ƒë∆°n h√†ng
        }

        // Thi·∫øt l·∫≠p order_id cho t·ª´ng detail
        for (SalesOrderDetail detail : newOrder.getDetails()) {
            detail.setSalesOrder(newOrder);
        }

        newOrder.setPartner(partner);

        try {
            System.out.println("üìù Ki·ªÉm tra danh s√°ch s·∫£n ph·∫©m tr∆∞·ªõc khi l∆∞u:");
            for (SalesOrderDetail detail : newOrder.getDetails()) {
                System.out.println("üîπ Product ID: " + detail.getProduct().getProductId() + ", Order ID: " + detail.getSalesOrder());
            }

            SalesOrder savedOrder = saleOrdersRepository.save(newOrder);
            System.out.println("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng: " + savedOrder.getOrderId());
            return saleOrdersMapper.toDTO(savedOrder);
        } catch (Exception e) {
            System.out.println("üö® L·ªói khi l∆∞u ƒë∆°n h√†ng: " + e.getMessage());
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "L·ªói khi t·∫°o ƒë∆°n h√†ng", e);
        }
    }


    /**
     * C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng theo ID
     */
    @Transactional
    public SaleOrdersDTO updateOrder(Long orderId, SaleOrdersDTO orderDTO) {
        SalesOrder existingOrder = saleOrdersRepository.findById(orderId)
                .orElseThrow(() -> new IllegalArgumentException("Order not found with ID: " + orderId));

        // C·∫≠p nh·∫≠t th√¥ng tin ƒë∆°n h√†ng
        existingOrder.setOrderDate(orderDTO.getOrderDate());
        existingOrder.setStatus(orderDTO.getStatus());
        existingOrder.setNote(orderDTO.getNote());

        SalesOrder updatedOrder = saleOrdersRepository.save(existingOrder);
        return saleOrdersMapper.toDTO(updatedOrder);
    }

    /**
     * X√≥a ƒë∆°n h√†ng theo ID
     */
    @Transactional
    public void deleteOrder(Long orderId) {
        if (!saleOrdersRepository.existsById(orderId)) {
            throw new IllegalArgumentException("Order not found with ID: " + orderId);
        }
        saleOrdersRepository.deleteById(orderId);
    }
}
