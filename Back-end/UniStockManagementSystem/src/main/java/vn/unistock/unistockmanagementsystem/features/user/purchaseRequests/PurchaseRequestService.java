package vn.unistock.unistockmanagementsystem.features.user.purchaseRequests;

import lombok.RequiredArgsConstructor;
import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;
import vn.unistock.unistockmanagementsystem.entities.*;
import vn.unistock.unistockmanagementsystem.features.user.materials.MaterialsRepository;
import vn.unistock.unistockmanagementsystem.features.user.partner.PartnerRepository;
import vn.unistock.unistockmanagementsystem.features.user.productMaterials.ProductMaterialsDTO;
import vn.unistock.unistockmanagementsystem.features.user.productMaterials.ProductMaterialsService;
import vn.unistock.unistockmanagementsystem.features.user.saleOrders.SaleOrdersRepository;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Service
@RequiredArgsConstructor
public class PurchaseRequestService {

    private static final Logger logger = LoggerFactory.getLogger(PurchaseRequestService.class);

    private final PurchaseRequestRepository purchaseRequestRepository;
    private final MaterialsRepository materialRepository;
    private final PurchaseRequestDetailRepository purchaseRequestDetailRepository;
    private final PartnerRepository partnerRepository;
    private final PurchaseRequestMapper purchaseRequestMapper;
    private final PurchaseRequestDetailMapper purchaseRequestDetailMapper;
    private final SaleOrdersRepository saleOrdersRepository;
    private final ProductMaterialsService productMaterialsService;
    private final SaleOrdersMapper saleOrdersMapper;

    public Page<PurchaseRequestDTO> getAllPurchaseRequests(Pageable pageable) {
        Page<PurchaseRequest> requests = purchaseRequestRepository.findAll(pageable);
        return requests.map(purchaseRequestMapper::toDTO);
    }

    public PurchaseRequestDTO getPurchaseRequestById(Long id) {
        PurchaseRequest purchaseRequest = purchaseRequestRepository.findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu mua v·∫≠t t∆∞ v·ªõi id: " + id));

        // T·∫£i purchaseRequestDetails v√† c√°c li√™n k·∫øt li√™n quan
        Hibernate.initialize(purchaseRequest.getPurchaseRequestDetails());
        for (PurchaseRequestDetail detail : purchaseRequest.getPurchaseRequestDetails()) {
            Hibernate.initialize(detail.getMaterial());
            Hibernate.initialize(detail.getMaterial().getUnit());
            Hibernate.initialize(detail.getPartner());
        }

        // S·ª≠ d·ª•ng mapper ƒë·ªÉ √°nh x·∫°
        PurchaseRequestDTO dto = purchaseRequestMapper.toDTO(purchaseRequest);
        return dto;
    }

    @Transactional
    public PurchaseRequestDTO createManualPurchaseRequest(PurchaseRequestDTO dto) {
        // Chuy·ªÉn ƒë·ªïi DTO ‚Üí Entity
        PurchaseRequest purchaseRequest = purchaseRequestMapper.toEntity(dto);
        purchaseRequest.setCreatedDate(LocalDateTime.now());
        purchaseRequest.setStatus(PurchaseRequest.RequestStatus.PENDING);

        if (dto.getSaleOrderId() != null) {
            SalesOrder salesOrder = saleOrdersRepository.findById(dto.getSaleOrderId())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + dto.getSaleOrderId()));
            purchaseRequest.setSalesOrder(salesOrder);
        }

        // T·∫°o danh s√°ch details
        List<PurchaseRequestDetail> details = new ArrayList<>();
        for (PurchaseRequestDetailDTO detailDto : dto.getPurchaseRequestDetails()) {
            PurchaseRequestDetail detail = purchaseRequestDetailMapper.toEntity(detailDto);
            Material material = materialRepository.findById(detailDto.getMaterialId())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y v·∫≠t t∆∞ v·ªõi ID: " + detailDto.getMaterialId()));
            Partner partner = partnerRepository.findById(detailDto.getPartnerId())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p v·ªõi ID: " + detailDto.getPartnerId()));

            detail.setMaterial(material);
            detail.setPartner(partner);
            detail.setPurchaseRequest(purchaseRequest);
            details.add(detail);
        }

        purchaseRequest.setPurchaseRequestDetails(details);

        purchaseRequest = purchaseRequestRepository.save(purchaseRequest);

        // Chuy·ªÉn ƒë·ªïi l·∫°i Entity ‚Üí DTO ƒë·ªÉ tr·∫£ v·ªÅ
        PurchaseRequestDTO responseDTO = purchaseRequestMapper.toDTO(purchaseRequest);
        responseDTO.setPurchaseRequestDetails(purchaseRequestDetailMapper.toDTOList(details));

        return responseDTO;
    }

    @Transactional
    public PurchaseRequestDTO updatePurchaseRequestStatus(Long purchaseRequestId, String newStatus) {
        PurchaseRequest request = purchaseRequestRepository.findById(purchaseRequestId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu v·ªõi ID: " + purchaseRequestId));

        // Chuy·ªÉn ƒë·ªïi String th√†nh Enum RequestStatus
        PurchaseRequest.RequestStatus statusEnum;
        try {
            statusEnum = PurchaseRequest.RequestStatus.valueOf(newStatus);
        } catch (IllegalArgumentException e) {
            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá: " + newStatus);
        }

        request.setStatus(statusEnum);
        PurchaseRequest updatedRequest = purchaseRequestRepository.save(request);

        return purchaseRequestMapper.toDTO(updatedRequest);
    }

    @Transactional
    public String getNextRequestCode() {
        try {
            Long maxId = purchaseRequestRepository.findMaxPurchaseRequestId();
            Long nextId = (maxId != null) ? (maxId + 1) : 1; // N·∫øu DB tr·ªëng, b·∫Øt ƒë·∫ßu t·ª´ 1
            return String.format("YC%05d", nextId);
        } catch (Exception e) {
            logger.error("Error generating next request code", e);
            throw new ResponseStatusException(HttpStatus.INTERNAL_SERVER_ERROR, "Kh√¥ng th·ªÉ t·∫°o m√£ y√™u c·∫ßu m·ªõi: " + e.getMessage(), e);
        }
    }

    @Transactional
    public PurchaseRequestDTO createFromSaleOrder(Long saleOrderId) {
        if (purchaseRequestRepository.existsBySalesOrder_OrderId(saleOrderId)) {
            throw new ResponseStatusException(
                    HttpStatus.BAD_REQUEST,
                    "ƒê∆°n h√†ng n√†y ƒë√£ c√≥ y√™u c·∫ßu mua v·∫≠t t∆∞!"
            );
        }
        // üü¢ 1. L·∫•y danh s√°ch v·∫≠t t∆∞ t·ª´ ƒë∆°n h√†ng
        List<ProductMaterialsDTO> materials = productMaterialsService.getMaterialsBySaleOrderId(saleOrderId);
        logger.info("Materials for SaleOrder {}: {}", saleOrderId, materials);
        if (materials.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y v·∫≠t t∆∞ cho ƒë∆°n h√†ng v·ªõi ID: " + saleOrderId);
        }

        // üü¢ 2. L·∫•y danh s√°ch nh√† cung c·∫•p cho t·ª´ng v·∫≠t t∆∞
        List<PurchaseRequestDetail> details = new ArrayList<>();
        for (ProductMaterialsDTO materialDTO : materials) {
            Material material = materialRepository.findById(materialDTO.getMaterialId())
                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y v·∫≠t t∆∞ v·ªõi ID: " + materialDTO.getMaterialId()));
            if (material.getUnit() == null) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "V·∫≠t t∆∞ " + materialDTO.getMaterialId() + " kh√¥ng c√≥ ƒë∆°n v·ªã (unit)");
            }
            if (material.getMaterialType() == null) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "V·∫≠t t∆∞ " + materialDTO.getMaterialId() + " kh√¥ng c√≥ lo·∫°i v·∫≠t t∆∞ (materialType)");
            }

            List<Partner> suppliers = partnerRepository.findPartnersByMaterialId(materialDTO.getMaterialId());

            if (suppliers.isEmpty()) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p cho v·∫≠t t∆∞: " + materialDTO.getMaterialName());
            }

            PurchaseRequestDetail detail = new PurchaseRequestDetail();
            detail.setMaterial(material);
            detail.setQuantity(materialDTO.getQuantity());
            detail.setPartner(suppliers.get(0));
            details.add(detail);
        }

        // üü¢ 3. T·∫°o m√£ y√™u c·∫ßu mua v·∫≠t t∆∞
        String purchaseRequestCode = getNextRequestCode();

        // üü¢ 4. L∆∞u y√™u c·∫ßu mua v·∫≠t t∆∞ v√†o DB
        PurchaseRequest purchaseRequest = new PurchaseRequest();
        purchaseRequest.setPurchaseRequestCode(purchaseRequestCode);
        purchaseRequest.setSalesOrder(saleOrdersRepository.findById(saleOrderId)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID: " + saleOrderId)));
        purchaseRequest.setCreatedDate(LocalDateTime.now());
        purchaseRequest.setStatus(PurchaseRequest.RequestStatus.PENDING);
        purchaseRequest = purchaseRequestRepository.save(purchaseRequest);

        // üü¢ 5. L∆∞u danh s√°ch v·∫≠t t∆∞ v√†o y√™u c·∫ßu mua v·∫≠t t∆∞
        for (PurchaseRequestDetail detail : details) {
            detail.setPurchaseRequest(purchaseRequest);
            purchaseRequestDetailRepository.save(detail);
        }
        purchaseRequestDetailRepository.flush();

        // üü¢ 6. T·∫£i l·∫°i PurchaseRequest v√† purchaseRequestDetails ri√™ng l·∫ª
        purchaseRequest = purchaseRequestRepository.findById(purchaseRequest.getPurchaseRequestId())
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu mua v·∫≠t t∆∞ v·ª´a t·∫°o"));
        // T·∫£i purchaseRequestDetails ri√™ng
        List<PurchaseRequestDetail> loadedDetails = purchaseRequestDetailRepository.findAllByPurchaseRequest(purchaseRequest);
        for (PurchaseRequestDetail detail : loadedDetails) {
            Hibernate.initialize(detail.getMaterial());
            Hibernate.initialize(detail.getMaterial().getUnit());
            Hibernate.initialize(detail.getMaterial().getMaterialType());
            Hibernate.initialize(detail.getPartner());
        }
        purchaseRequest.setPurchaseRequestDetails(loadedDetails);

        // üü¢ 7. Chuy·ªÉn sang DTO v√† ki·ªÉm tra purchaseRequestDetails
        PurchaseRequestDTO dto = purchaseRequestMapper.toDTO(purchaseRequest);
        if (dto.getPurchaseRequestDetails() == null) {
            dto.setPurchaseRequestDetails(new ArrayList<>());
        }

        return dto;
    }
}