package vn.unistock.unistockmanagementsystem.features.user.products;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import vn.unistock.unistockmanagementsystem.entities.Product;

import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class ProductsService {
    private final ProductsRepository productsRepository;
    private final ProductsMapper productsMapper = ProductsMapper.INSTANCE;

    // üü¢ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m (User c√≥ quy·ªÅn xem t·∫•t c·∫£)
    public List<ProductsDTO> getAllProducts() {
        return productsRepository.findAll()
                .stream()
                .map(productsMapper::toDTO)
                .collect(Collectors.toList());
    }

    // üü¢ L·∫•y danh s√°ch s·∫£n ph·∫©m c·ªßa ch√≠nh User
    public List<ProductsDTO> getUserProducts(Long userId) {
        return productsRepository.findByCreatedBy(userId)
                .stream()
                .map(productsMapper::toDTO)
                .collect(Collectors.toList());
    }

    // üü¢ User t·∫°o s·∫£n ph·∫©m m·ªõi
    public ProductsDTO createProduct(ProductsDTO dto, Long userId) {
        Product product = productsMapper.toEntity(dto);
        product.setCreatedBy(userId);
        return productsMapper.toDTO(productsRepository.save(product));
    }

    // üü¢ User c·∫≠p nh·∫≠t s·∫£n ph·∫©m c·ªßa ch√≠nh m√¨nh
    public ProductsDTO updateProduct(Long productId, ProductsDTO dto, Long userId) {
        Product product = productsRepository.findById(productId)
                .orElseThrow(() -> new IllegalArgumentException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"));

        if (!product.getCreatedBy().equals(userId)) {
            throw new SecurityException("B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a s·∫£n ph·∫©m n√†y");
        }

        product.setProductName(dto.getProductName());
        product.setDescription(dto.getDescription());
        product.setPrice(dto.getPrice());

        return productsMapper.toDTO(productsRepository.save(product));
    }

    // üü¢ User x√≥a s·∫£n ph·∫©m c·ªßa ch√≠nh m√¨nh
    public void deleteProduct(Long productId, Long userId) {
        Product product = productsRepository.findById(productId)
                .orElseThrow(() -> new IllegalArgumentException("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i"));

        if (!product.getCreatedBy().equals(userId)) {
            throw new SecurityException("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a s·∫£n ph·∫©m n√†y");
        }

        productsRepository.delete(product);
    }
}
