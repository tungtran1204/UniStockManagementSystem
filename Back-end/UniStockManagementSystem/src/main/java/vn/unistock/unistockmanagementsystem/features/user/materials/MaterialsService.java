package vn.unistock.unistockmanagementsystem.features.user.materials;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import vn.unistock.unistockmanagementsystem.entities.Material;
import vn.unistock.unistockmanagementsystem.entities.MaterialPartner;
import vn.unistock.unistockmanagementsystem.entities.Partner;
import vn.unistock.unistockmanagementsystem.features.user.materialPartners.MaterialPartnerRepository;
import vn.unistock.unistockmanagementsystem.features.user.materialPartners.MaterialPartnerService;
import vn.unistock.unistockmanagementsystem.features.user.materialType.MaterialTypeRepository;
import vn.unistock.unistockmanagementsystem.features.user.partner.PartnerRepository;
import vn.unistock.unistockmanagementsystem.features.user.units.UnitRepository;
import vn.unistock.unistockmanagementsystem.utils.storage.AzureBlobService;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
@Slf4j
public class MaterialsService {
    private final MaterialsRepository materialsRepository;
    private final UnitRepository unitRepository;
    private final MaterialTypeRepository materialTypeRepository;
    private final MaterialsMapper materialsMapper;
    private final AzureBlobService azureBlobService;
    private final MaterialPartnerRepository materialPartnerRepository;
    private final PartnerRepository partnerRepository;
    private final MaterialPartnerService materialPartnerService;

    // üü¢ L·∫•y t·∫•t c·∫£ nguy√™n li·ªáu c√≥ ph√¢n trang
    public Page<MaterialsDTO> getAllMaterials(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<Material> materialPage = materialsRepository.findAll(pageable);
        return materialPage.map(materialsMapper::toDTO);
    }

    // üü¢ T·∫°o nguy√™n v·∫≠t li·ªáu m·ªõi
    @Transactional
    public MaterialsDTO createMaterial(MaterialsDTO materialDTO, String createdBy) {
        log.info("üìå [DEBUG] Creating Material: {}", materialDTO);

        Material material = new Material();
        material.setMaterialCode(materialDTO.getMaterialCode());
        material.setMaterialName(materialDTO.getMaterialName());
        material.setDescription(materialDTO.getDescription());

        if (materialDTO.getUnitId() != null) {
            material.setUnit(unitRepository.findById(materialDTO.getUnitId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n v·ªã v·ªõi ID: " + materialDTO.getUnitId())));
        }
        if (materialDTO.getTypeId() != null) {
            material.setMaterialType(materialTypeRepository.findById(materialDTO.getTypeId())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y danh m·ª•c v·ªõi ID: " + materialDTO.getTypeId())));
        }

        material.setIsUsing(materialDTO.getIsUsing() != null ? materialDTO.getIsUsing() : true);
        material.setImageUrl(materialDTO.getImageUrl());
        material.setCreatedBy(createdBy);
        material.setCreatedAt(LocalDateTime.now());

        Material savedMaterial = materialsRepository.save(material);

        // ‚úÖ Ki·ªÉm tra danh s√°ch supplierIds
        log.info("üìå [DEBUG] supplierIds received: {}", materialDTO.getSupplierIds());

        if (materialDTO.getSupplierIds() != null && !materialDTO.getSupplierIds().isEmpty()) {
            List<MaterialPartner> materialPartners = materialDTO.getSupplierIds().stream()
                    .map(supplierId -> {
                        Partner partner = partnerRepository.findById(supplierId)
                                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p v·ªõi ID: " + supplierId));
                        return new MaterialPartner(null, savedMaterial, partner);
                    })
                    .collect(Collectors.toList());

            materialPartnerService.saveAll(materialPartners);
            savedMaterial.getMaterialPartners().addAll(materialPartners);
            log.info("‚úÖ [SUCCESS] Saved MaterialPartners: {}", materialPartners.stream()
                    .map(mp -> "MaterialPartner{id=" + mp.getId() + "}")
                    .collect(Collectors.toList()));
        } else {
            log.warn("‚ö†Ô∏è [WARNING] No suppliers were provided or saved.");
        }

        return materialsMapper.toDTO(savedMaterial);
    }

    // üü¢ L·∫•y nguy√™n v·∫≠t li·ªáu theo ID
    public MaterialsDTO getMaterialById(Long materialId) {
        Material material = materialsRepository.findByIdWithPartners(materialId)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y v·∫≠t t∆∞ v·ªõi ID: " + materialId));

        return materialsMapper.toDTO(material);
    }

    // üü¢ B·∫≠t/t·∫Øt tr·∫°ng th√°i s·ª≠ d·ª•ng nguy√™n v·∫≠t li·ªáu
    @Transactional
    public MaterialsDTO toggleUsingStatus(Long id) {
        Material material = materialsRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nguy√™n v·∫≠t li·ªáu"));

        material.setIsUsing(!Boolean.TRUE.equals(material.getIsUsing())); // ƒê·ªïi tr·∫°ng th√°i an to√†n
        Material savedMaterial = materialsRepository.save(material);
        return materialsMapper.toDTO(savedMaterial);
    }

    // üü¢ Ki·ªÉm tra m√£ nguy√™n v·∫≠t li·ªáu ƒë√£ t·ªìn t·∫°i ch∆∞a
    public boolean isMaterialCodeExists(String materialCode, Long excludeId) {
        if (excludeId != null) {
            return materialsRepository.existsByMaterialCodeAndMaterialIdNot(materialCode, excludeId);
        }
        return materialsRepository.existsByMaterialCode(materialCode);
    }

    // üü¢ C·∫≠p nh·∫≠t nguy√™n v·∫≠t li·ªáu
    @Transactional
    public MaterialsDTO updateMaterial(Long id, MaterialsDTO updatedMaterial, MultipartFile newImage) throws IOException {
        Material material = materialsRepository.findByIdWithPartners(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nguy√™n v·∫≠t li·ªáu"));

        // X·ª≠ l√Ω ·∫£nh n·∫øu c√≥ upload ·∫£nh m·ªõi
        if (newImage != null && !newImage.isEmpty()) {
            if (material.getImageUrl() != null) {
                azureBlobService.deleteFile(material.getImageUrl());
            }
            String newImageUrl = azureBlobService.uploadFile(newImage);
            material.setImageUrl(newImageUrl);
        }

        // C·∫≠p nh·∫≠t th√¥ng tin kh√°c
        material.setMaterialCode(updatedMaterial.getMaterialCode());
        material.setMaterialName(updatedMaterial.getMaterialName());
        material.setDescription(updatedMaterial.getDescription());

        if (updatedMaterial.getUnitId() != null) {
            material.setUnit(unitRepository.findById(updatedMaterial.getUnitId()).orElse(null));
        }
        if (updatedMaterial.getTypeId() != null) {
            material.setMaterialType(materialTypeRepository.findById(updatedMaterial.getTypeId()).orElse(null));
        }

        // C·∫≠p nh·∫≠t tr·∫°ng th√°i s·ª≠ d·ª•ng
        if (updatedMaterial.getIsUsing() != null) {
            material.setIsUsing(updatedMaterial.getIsUsing());
        }

        // C·∫≠p nh·∫≠t danh s√°ch nh√† cung c·∫•p (MaterialPartner)
        // B∆∞·ªõc 1: X√≥a t·∫•t c·∫£ MaterialPartner hi·ªán t·∫°i c·ªßa v·∫≠t t∆∞
        material.getMaterialPartners().clear(); // Hibernate s·∫Ω t·ª± ƒë·ªông x√≥a c√°c b·∫£n ghi trong DB do orphanRemoval = true

        // B∆∞·ªõc 2: T·∫°o m·ªõi MaterialPartner d·ª±a tr√™n supplierIds
        if (updatedMaterial.getSupplierIds() != null && !updatedMaterial.getSupplierIds().isEmpty()) {
            List<MaterialPartner> materialPartners = updatedMaterial.getSupplierIds().stream()
                    .map(supplierId -> {
                        Partner partner = partnerRepository.findById(supplierId)
                                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y nh√† cung c·∫•p v·ªõi ID: " + supplierId));
                        return new MaterialPartner(null, material, partner);
                    })
                    .collect(Collectors.toList());

            materialPartnerService.saveAll(materialPartners);
            material.getMaterialPartners().addAll(materialPartners);
            log.info("‚úÖ [SUCCESS] Updated MaterialPartners: {}", materialPartners.stream()
                    .map(mp -> "MaterialPartner{id=" + mp.getId() + "}")
                    .collect(Collectors.toList()));
        } else {
            log.warn("‚ö†Ô∏è [WARNING] No suppliers were provided or saved.");
        }

        Material savedMaterial = materialsRepository.save(material);
        return materialsMapper.toDTO(savedMaterial);
    }


    public List<MaterialsDTO> getMaterialsByPartner(Long partnerId) {
        List<Material> materials = materialsRepository.findByPartnerId(partnerId);
        return materials.stream()
                .map(materialsMapper::toDTO)
                .collect(Collectors.toList());
    }
}