package vn.unistock.unistockmanagementsystem.features.user.products;

import lombok.RequiredArgsConstructor;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import vn.unistock.unistockmanagementsystem.entities.Product;
import vn.unistock.unistockmanagementsystem.entities.ProductType;
import vn.unistock.unistockmanagementsystem.entities.Unit;
import vn.unistock.unistockmanagementsystem.features.user.productTypes.ProductTypeRepository;
import vn.unistock.unistockmanagementsystem.features.user.units.UnitRepository;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class ExcelService {
    private final UnitRepository unitRepository;
    private final ProductTypeRepository productTypeRepository;
    private final ProductsRepository productsRepository;

    public void importProducts(MultipartFile file) throws IOException {
        if (file.isEmpty()) {
            throw new IllegalArgumentException("üìõ File Excel b·ªã tr·ªëng!");
        }

        Workbook workbook = new XSSFWorkbook(file.getInputStream());
        Sheet sheet = workbook.getSheetAt(0);
        List<Product> products = new ArrayList<>();
        DataFormatter formatter = new DataFormatter(); // üîπ ƒê·ªçc d·ªØ li·ªáu d∆∞·ªõi d·∫°ng String

        for (int i = 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row == null) continue;

            try {
                String productName = formatter.formatCellValue(row.getCell(0)).trim();
                String description = formatter.formatCellValue(row.getCell(1)).trim();
                String priceStr = formatter.formatCellValue(row.getCell(2)).trim();
                String unitName = formatter.formatCellValue(row.getCell(3)).trim();
                String typeName = formatter.formatCellValue(row.getCell(4)).trim();
                String createdBy = formatter.formatCellValue(row.getCell(5)).trim();

                // üîπ Chuy·ªÉn ƒë·ªïi gi√° t·ª´ String -> Double
                double price = 0;
                if (!priceStr.isEmpty()) {
                    try {
                        price = Double.parseDouble(priceStr);
                    } catch (NumberFormatException e) {
                        System.err.println("‚ö† L·ªói chuy·ªÉn ƒë·ªïi gi√° ·ªü d√≤ng " + (i + 1) + ": " + priceStr);
                        continue;
                    }
                }

                // üîπ Ki·ªÉm tra ho·∫∑c t·∫°o ƒë∆°n v·ªã m·ªõi
                Unit unit = unitRepository.findByUnitName(unitName)
                        .orElseGet(() -> {
                            Unit newUnit = new Unit();
                            newUnit.setUnitName(unitName);
                            return unitRepository.save(newUnit);
                        });

                // üîπ Ki·ªÉm tra ho·∫∑c t·∫°o lo·∫°i s·∫£n ph·∫©m m·ªõi
                ProductType type = productTypeRepository.findByTypeName(typeName)
                        .orElseGet(() -> {
                            ProductType newType = new ProductType();
                            newType.setTypeName(typeName);
                            return productTypeRepository.save(newType);
                        });

                // üîπ T·∫°o s·∫£n ph·∫©m m·ªõi
                Product product = new Product();
                product.setProductName(productName);
                product.setDescription(description);
                product.setUnit(unit);
                product.setProductType(type);
                product.setCreatedBy(createdBy);
                product.setUpdatedBy(createdBy);

                products.add(product);
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói khi x·ª≠ l√Ω d√≤ng " + (i + 1) + ": " + e.getMessage());
            }
        }

        workbook.close();

        // üîπ Ki·ªÉm tra danh s√°ch tr∆∞·ªõc khi l∆∞u v√†o DB
        if (!products.isEmpty()) {
            productsRepository.saveAll(products);
            System.out.println("‚úÖ Nh·∫≠p th√†nh c√¥ng " + products.size() + " s·∫£n ph·∫©m!");
        } else {
            throw new IllegalArgumentException("üìõ Kh√¥ng c√≥ s·∫£n ph·∫©m h·ª£p l·ªá ƒë·ªÉ nh·∫≠p!");
        }
    }
}