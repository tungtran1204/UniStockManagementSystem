import { useState, useEffect } from "react";
import {
  getAllRoles,
  getAllPermissions,
  getRolePermissions,
  updateRole,
  toggleRoleStatus,
  deleteRole,
} from "./roleService";

const useRole = () => {
  const [roles, setRoles] = useState([]);
  const [allPermissions, setAllPermissions] = useState([]); // üü¢ L∆∞u danh s√°ch permissions
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [selectedRole, setSelectedRole] = useState(null);
  const [rolePermissions, setRolePermissions] = useState([]); // üü¢ Permissions c·ªßa role

  // üü¢ T·∫£i danh s√°ch Vai Tr√≤ t·ª´ backend
  useEffect(() => {
    setLoading(true);
    const fetchData = async () => {
      try {
        const rolesData = await getAllRoles();
        setRoles(rolesData);
        console.log("‚úÖ [useRole] Danh s√°ch roles:", rolesData);

        const permissionsData = await getAllPermissions();
        setAllPermissions(permissionsData);
        console.log("‚úÖ [useRole] Danh s√°ch permissions:", permissionsData);
      } catch (err) {
        console.error("üö® [useRole] L·ªói khi t·∫£i d·ªØ li·ªáu:", err);
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  // üü¢ L·∫•y danh s√°ch permissions c·ªßa m·ªôt role c·ª• th·ªÉ
  const fetchRolePermissions = async (roleId) => {
    try {
      setLoading(true);
      const rolePerms = await getRolePermissions(roleId);
      setRolePermissions(rolePerms);
      console.log(`‚úÖ [useRole] Danh s√°ch permissions cho Role ID ${roleId}:`, rolePerms);
    } catch (err) {
      console.error(`üö® [useRole] L·ªói khi l·∫•y danh s√°ch permissions c·ªßa role ${roleId}:`, err);
      setRolePermissions([]);
    } finally {
      setLoading(false);
    }
  };

  // üü¢ Ch·ªçn role ƒë·ªÉ ch·ªânh s·ª≠a (hi·ªÉn th·ªã trong modal)
  const handleSelectRole = (role) => {
    setSelectedRole(role);
    fetchRolePermissions(role.id);
  };

  // üü¢ Th√™m Vai Tr√≤ m·ªõi
  const handleAddRole = async (role) => {
    try {
      const newRole = await addRole(role);
      if (newRole) {
        setRoles([...roles, newRole]);
        console.log("‚úÖ [useRole] Vai tr√≤ m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m:", newRole);
      }
    } catch (error) {
      console.error("‚ùå [useRole] L·ªói khi th√™m Vai Tr√≤:", error);
    }
  };

  // üü¢ C·∫≠p nh·∫≠t Vai Tr√≤
  const handleUpdateRole = async (id, updatedRole) => {
    try {
      const updated = await updateRole(id, updatedRole);
      if (updated) {
        setRoles(roles.map((role) => (role.id === id ? updated : role)));
        console.log("‚úÖ [useRole] Vai tr√≤ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", updated);
      }
    } catch (error) {
      console.error("‚ùå [useRole] L·ªói khi c·∫≠p nh·∫≠t Vai Tr√≤:", error);
    }
  };

  // üîÑ **Toggle tr·∫°ng th√°i `isActive` c·ªßa Vai Tr√≤**
  const handleToggleRoleStatus = async (id, currentStatus) => {
    try {
      const updated = await toggleRoleStatus(id, !currentStatus);
      if (updated) {
        setRoles(roles.map((role) => (role.id === id ? { ...role, active: !currentStatus } : role)));
        console.log("‚úÖ [useRole] Tr·∫°ng th√°i Vai Tr√≤ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t:", updated);
      }
    } catch (error) {
      console.error("‚ùå [useRole] L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i Vai Tr√≤:", error);
    }
  };

  // üî¥ X√≥a Vai Tr√≤
  const handleDeleteRole = async (id) => {
    try {
      const success = await deleteRole(id);
      if (success) {
        setRoles(roles.filter((role) => role.id !== id));
        console.log(`‚úÖ [useRole] Vai tr√≤ ID ${id} ƒë√£ b·ªã x√≥a.`);
      }
    } catch (error) {
      console.error("‚ùå [useRole] L·ªói khi x√≥a Vai Tr√≤:", error);
    }
  };

  return {
    roles,
    allPermissions,
    rolePermissions,
    selectedRole,
    loading,
    error,
    handleSelectRole,
    handleAddRole,
    handleUpdateRole,
    handleToggleRoleStatus,
    handleDeleteRole,
  };
};

export default useRole;
