import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogHeader,
  DialogBody,
  DialogFooter,
  Input,
  Button,
  Switch,
  Alert,
} from "@material-tailwind/react";
import { getAllRoles } from "../roles/roleService";
import { checkEmailExists, createUser } from "../users/userService"; 
import { InformationCircleIcon, CheckCircleIcon } from "@heroicons/react/24/outline"; // ‚úÖ Import icon

const ModalAddUser = ({ open, onClose, fetchUsers }) => {
  const [email, setEmail] = useState("");
  const [emailError, setEmailError] = useState("");
  const [password, setPassword] = useState("");
  const [passwordError, setPasswordError] = useState("");
  const [fullname, setFullname] = useState("");
  const [phoneNumber, setPhoneNumber] = useState("");
  const [roles, setRoles] = useState([]);
  const [selectedRoles, setSelectedRoles] = useState(new Set());
  const [isActive, setIsActive] = useState(true);
  const [loading, setLoading] = useState(false);
  const [toast, setToast] = useState({ open: false, type: "", message: "" }); // ‚úÖ Toast State

  useEffect(() => {
    if (open) {
      getAllRoles()
        .then((data) => {
          setRoles(data);
        })
        .catch((error) => {
          console.error("‚ùå L·ªói khi l·∫•y danh s√°ch Role:", error);
        });
    }
  }, [open]);

  const showToast = (type, message) => {
    setToast({ open: true, type, message });
    setTimeout(() => setToast({ open: false }), 3000);
  };

  const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

  const handleCheckEmail = async (newEmail) => {
    setEmail(newEmail);
    setEmailError("");

    if (!newEmail.trim()) {
      setEmailError("Vui l√≤ng nh·∫≠p email!");
      return;
    }

    if (!isValidEmail(newEmail)) {
      setEmailError("Email kh√¥ng h·ª£p l·ªá!");
      return;
    }

    try {
      const emailExists = await checkEmailExists(newEmail);
      if (emailExists) {
        setEmailError("Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
      }
    } catch (error) {
      console.error("‚ùå L·ªói ki·ªÉm tra email:", error);
    }
  };

  const handlePasswordChange = (newPassword) => {
    setPassword(newPassword);
    setPasswordError("");

    if (newPassword.length < 8 || !/[A-Za-z]/.test(newPassword) || !/\d/.test(newPassword)) {
      setPasswordError("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, g·ªìm c·∫£ s·ªë v√† ch·ªØ!");
    }
  };

  const handleRoleChange = (roleId) => {
    setSelectedRoles((prevRoles) => {
      const updatedRoles = new Set(prevRoles);
      if (updatedRoles.has(roleId)) {
        updatedRoles.delete(roleId);
      } else {
        updatedRoles.add(roleId);
      }
      return updatedRoles;
    });
  };

  const handleAddUser = async () => {
    setEmailError("");
    setPasswordError("");

    if (!email.trim() || emailError) {
      setEmailError("Vui l√≤ng nh·∫≠p email h·ª£p l·ªá!");
      return;
    }

    if (!password.trim() || passwordError) {
      setPasswordError("M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá!");
      return;
    }

    if (selectedRoles.size === 0) {
      showToast("red", "‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt vai tr√≤!");
      return;
    }

    const userData = {
      username: email.split("@")[0],
      email,
      password,
      isActive,
      roleIds: Array.from(selectedRoles),
      userDetail: {
        fullname,
        phoneNumber,
        address: "ƒê·ªãa ch·ªâ ch∆∞a c·∫≠p nh·∫≠t",
        dateOfBirth: "",
        profilePicture: "",
      },
    };

    console.log("üöÄ ƒêang g·ª≠i request API:", userData);

    try {
      setLoading(true);
      await createUser(userData);
      fetchUsers();
      showToast("green", "‚úÖ Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!");
      setTimeout(onClose, 2000); // ‚úÖ ƒê√≥ng modal sau 2 gi√¢y
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫°o user:", error);
      showToast("red", "‚ùå L·ªói khi t·∫°o user! Vui l√≤ng ki·ªÉm tra l·∫°i.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} handler={onClose} size="md" className="rounded-lg shadow-lg">
      <DialogHeader className="text-lg font-bold text-gray-800">Th√™m Ng∆∞·ªùi D√πng</DialogHeader>

      {/* ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o Toast */}
      {toast.open && (
        <div className="p-4">
          <Alert color={toast.type} icon={toast.type === "green" ? <CheckCircleIcon className="h-6 w-6" /> : <InformationCircleIcon className="h-6 w-6" />}>
            {toast.message}
          </Alert>
        </div>
      )}

      <DialogBody className="space-y-4">
        <Input label="H·ªç v√† T√™n" type="text" value={fullname} onChange={(e) => setFullname(e.target.value)} required />

        <div>
          <Input label="Email" type="email" value={email} onChange={(e) => handleCheckEmail(e.target.value)} required />
          {emailError && <p className="text-red-500 text-xs mt-1">{emailError}</p>}
        </div>

        <div>
          <Input label="M·∫≠t kh·∫©u" type="password" value={password} onChange={(e) => handlePasswordChange(e.target.value)} required />
          {passwordError && <p className="text-red-500 text-xs mt-1">{passwordError}</p>}
        </div>

        <Input label="S·ªë ƒëi·ªán tho·∫°i" type="tel" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} required />

        <div className="flex flex-col">
          <p className="text-sm font-semibold text-gray-700">Ch·ªçn Vai Tr√≤:</p>
          <div className="flex flex-wrap gap-2">
            {roles.length > 0 ? (
              roles.map((r) => (
                <button
                  key={r.id}
                  onClick={() => handleRoleChange(r.id)}
                  className={`px-4 py-2 text-sm rounded-lg transition-all ${
                    selectedRoles.has(r.id) ? "bg-blue-500 text-white shadow-md" : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                  }`}
                >
                  {r.name}
                </button>
              ))
            ) : (
              <p className="text-sm text-gray-500">Kh√¥ng c√≥ vai tr√≤ n√†o.</p>
            )}
          </div>
        </div>

        <div className="flex items-center gap-2">
          <Switch color="green" checked={isActive} onChange={() => setIsActive(!isActive)} />
          <span>{isActive ? "Ho·∫°t ƒë·ªông" : "V√¥ hi·ªáu h√≥a"}</span>
        </div>
      </DialogBody>

      <DialogFooter>
        <Button variant="text" color="gray" onClick={onClose}>H·ªßy</Button>
        <Button color="blue" onClick={handleAddUser} disabled={loading}>
          {loading ? "ƒêang t·∫°o..." : "Th√™m"}
        </Button>
      </DialogFooter>
    </Dialog>
  );
};

export default ModalAddUser;
