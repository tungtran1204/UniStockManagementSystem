import React, { useState, useEffect } from "react";
import {
  Dialog,
  DialogHeader,
  DialogBody,
  DialogFooter,
  Input,
  Button,
  Switch,
} from "@material-tailwind/react";
import { updateUser, checkEmailExists } from "./userService"; // ‚úÖ Th√™m checkEmailExists
import { FaEye, FaEyeSlash } from "react-icons/fa"; // ‚úÖ Import icon con m·∫Øt

const ModalEditUser = ({ open, onClose, user, fetchUsers }) => {
  const [email, setEmail] = useState("");
  const [emailError, setEmailError] = useState(""); // ‚úÖ L∆∞u l·ªói email
  const [password, setPassword] = useState(""); // ‚úÖ Th√™m m·∫≠t kh·∫©u
  const [showPassword, setShowPassword] = useState(false); // ‚úÖ Hi·ªÉn th·ªã m·∫≠t kh·∫©u
  const [isActive, setIsActive] = useState(false);
  const [phoneNumber, setPhoneNumber] = useState("");
  const [address, setAddress] = useState("");
  const [fullname, setFullname] = useState("");
  const [dateOfBirth, setDateOfBirth] = useState("");
  const [isAdmin, setIsAdmin] = useState(false); // ‚úÖ Ki·ªÉm tra user c√≥ ph·∫£i ADMIN kh√¥ng

  // üü¢ **C·∫≠p nh·∫≠t d·ªØ li·ªáu khi `user` thay ƒë·ªïi**
  useEffect(() => {
    if (user) {
      setEmail(user.email || "");
      setIsActive(user.isActive || false);
      setIsAdmin(user.roleNames?.includes("ADMIN"));
      setFullname(user.userDetail?.fullname || "");
      setPhoneNumber(user.userDetail?.phoneNumber || "");
      setAddress(user.userDetail?.address || "");
      setDateOfBirth(user.userDetail?.dateOfBirth || "");
    }
  }, [user]);

  // üü¢ **Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng**
  const handleCheckEmail = async (newEmail) => {
    setEmail(newEmail);
    setEmailError(""); // ‚úÖ Reset l·ªói

    if (newEmail !== user.email) {
      try {
        const emailExists = await checkEmailExists(newEmail);
        if (emailExists) {
          setEmailError("Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!"); // ‚úÖ Hi·ªÉn th·ªã l·ªói
        }
      } catch (error) {
        console.error("‚ùå L·ªói ki·ªÉm tra email:", error);
      }
    }
  };

  // üü¢ **C·∫≠p nh·∫≠t user**
  const handleUpdateUser = async () => {
    if (!email.trim()) {
      setEmailError("Vui l√≤ng nh·∫≠p email!");
      return;
    }
    if (emailError) return; // ‚úÖ N·∫øu email l·ªói, kh√¥ng cho submit

    const updatedUser = {
      userId: user.userId,
      email,
      isActive: isAdmin ? user.isActive : isActive,
      password: password.trim() !== "" ? password : undefined, // ‚úÖ N·∫øu ƒë·ªÉ tr·ªëng, gi·ªØ nguy√™n m·∫≠t kh·∫©u c≈©
      userDetail: {
        fullname,
        phoneNumber,
        address,
        dateOfBirth,
      },
    };

    try {
      await updateUser(user.userId, updatedUser);
      fetchUsers();
      onClose();
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:", error);
    }
  };

  return (
    <Dialog open={open} handler={onClose} size="lg">
      <DialogHeader>Ch·ªânh S·ª≠a Ng∆∞·ªùi D√πng</DialogHeader>
      <DialogBody divider className="space-y-4">
        {/* üî• Ki·ªÉm tra Email */}
        <div>
          <Input
            label="Email"
            type="email"
            value={email}
            onChange={(e) => handleCheckEmail(e.target.value)}
            required
          />
          {emailError && <p className="text-red-500 text-xs mt-1">{emailError}</p>}
        </div>

        {/* üî• M·∫≠t kh·∫©u + N√∫t hi·ªÉn th·ªã m·∫≠t kh·∫©u */}
        <div className="relative">
          <Input
            label="M·∫≠t kh·∫©u (ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng mu·ªën thay ƒë·ªïi)"
            type={showPassword ? "text" : "password"}
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
          <button
            type="button"
            className="absolute inset-y-0 right-3 flex items-center text-gray-600"
            onClick={() => setShowPassword(!showPassword)}
          >
            {showPassword ? <FaEyeSlash size={18} /> : <FaEye size={18} />}
          </button>
        </div>

        <Input label="H·ªç v√† t√™n" value={fullname} onChange={(e) => setFullname(e.target.value)} />
        <Input label="S·ªë ƒëi·ªán tho·∫°i" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} />
        <Input label="ƒê·ªãa ch·ªâ" value={address} onChange={(e) => setAddress(e.target.value)} />
        <Input label="Ng√†y sinh" type="date" value={dateOfBirth} onChange={(e) => setDateOfBirth(e.target.value)} />

        {/* üî• ·∫®n ph·∫ßn ch·ªânh tr·∫°ng th√°i n·∫øu l√† ADMIN */}
        {!isAdmin && (
          <div className="flex items-center gap-2">
            <Switch color="green" checked={isActive} onChange={() => setIsActive(!isActive)} />
            <span>{isActive ? "Ho·∫°t ƒë·ªông" : "V√¥ hi·ªáu h√≥a"}</span>
          </div>
        )}
      </DialogBody>

      <DialogFooter>
        <Button variant="text" color="gray" onClick={onClose}>
          H·ªßy
        </Button>
        <Button color="blue" onClick={handleUpdateUser}>
          L∆∞u
        </Button>
      </DialogFooter>
    </Dialog>
  );
};

export default ModalEditUser;
