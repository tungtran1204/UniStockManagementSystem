import React, { useState } from "react";
import {
  Typography,
  Button,
  Input,
  Select,
  Option,
} from "@material-tailwind/react";
import { checkMaterialCodeExists } from "../materials/materialService";

const CreateMaterialModal = ({
  show,
  onClose,
  loading,
  newMaterial = {  // Th√™m gi√° tr·ªã m·∫∑c ƒë·ªãnh
    materialCode: '',
    materialName: '',
    description: '',
    unitId: '',
    typeId: '',
    isActive: 'true'
  },
  setNewMaterial,
  handleCreateMaterial,
  errors = {},  // Th√™m gi√° tr·ªã m·∫∑c ƒë·ªãnh cho errors
  units = [],
  materialCategories = [],
}) => {
  const [productCodeError, setProductCodeError] = useState(""); // State ƒë·ªÉ l∆∞u l·ªói m√£ nguy√™n v·∫≠t li·ªáu t·ªìn t·∫°i
  const [validationErrors, setValidationErrors] = useState({}); // State ƒë·ªÉ l∆∞u l·ªói validation (kho·∫£ng tr·∫Øng/tr·ªëng)

  if (!show) return null;

  // H√†m ki·ªÉm tra chu·ªói c√≥ ch·ª©a to√†n kho·∫£ng tr·∫Øng ho·∫∑c tr·ªëng kh√¥ng
  const isEmptyOrWhitespace = (str) => !str || /^\s*$/.test(str);

  // H√†m ki·ªÉm tra m√£ nguy√™n v·∫≠t li·ªáu (ki·ªÉm tra ngay khi nh·∫≠p)
  const handleCheckMaterialCode = async (newCode) => {
    setNewMaterial(prev => ({
      ...prev,
      materialCode: newCode || ''
    })); setProductCodeError(""); // Reset l·ªói m·ªói khi nh·∫≠p
    if (newCode.trim()) {
      try {
        const exists = await checkMaterialCodeExists(newCode); // G·ªçi API ki·ªÉm tra
        if (exists) {
          setProductCodeError("M√£ nguy√™n v·∫≠t li·ªáu n√†y ƒë√£ t·ªìn t·∫°i!");
        }
      } catch (error) {
        console.error("‚ùå L·ªói ki·ªÉm tra m√£ nguy√™n v·∫≠t li·ªáu:", error);
        setProductCodeError("L·ªói khi ki·ªÉm tra m√£ nguy√™n v·∫≠t li·ªáu!");
      }
    }

    // X√≥a l·ªói validation n·∫øu d·ªØ li·ªáu h·ª£p l·ªá
    if (!isEmptyOrWhitespace(newCode)) {
      setValidationErrors((prev) => ({ ...prev, materialCode: "" }));
    }
  };

  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi t√™n nguy√™n v·∫≠t li·ªáu
  const handleMaterialNameChange = (newName) => {
    setNewMaterial({ ...newMaterial, materialName: newName });

    // X√≥a l·ªói validation n·∫øu d·ªØ li·ªáu h·ª£p l·ªá
    if (!isEmptyOrWhitespace(newName)) {
      setValidationErrors((prev) => ({ ...prev, materialName: "" }));
    }
  };

  // H√†m x·ª≠ l√Ω khi nh·∫•n n√∫t "T·∫°o nguy√™n v·∫≠t li·ªáu"
  const handleCreateMaterialWrapper = () => {
    const newErrors = {};

    if (isEmptyOrWhitespace(newMaterial.materialCode)) {
      newErrors.materialCode = "M√£ nguy√™n v·∫≠t li·ªáu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c ch·ªâ ch·ª©a kho·∫£ng tr·∫Øng!";
    }
    if (isEmptyOrWhitespace(newMaterial.materialName)) {
      newErrors.materialName = "T√™n nguy√™n v·∫≠t li·ªáu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c ch·ªâ ch·ª©a kho·∫£ng tr·∫Øng!";
    }
    if (!newMaterial.unitId) {
      newErrors.unitId = "Vui l√≤ng ch·ªçn ƒë∆°n v·ªã!";
    }
    if (!newMaterial.typeId) {
      newErrors.typeId = "Vui l√≤ng ch·ªçn danh m·ª•c!";
    }

    setValidationErrors(newErrors);

    console.log("üìå D·ªØ li·ªáu newMaterial tr∆∞·ªõc khi t·∫°o:", newMaterial);

    // Ch·ªâ g·ªçi h√†m g·ªëc n·∫øu kh√¥ng c√≥ l·ªói validation v√† kh√¥ng c√≥ productCodeError
    if (Object.keys(newErrors).length === 0 && !productCodeError) {
      handleCreateMaterial();
    }
  };

  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·ªÉ v√¥ hi·ªáu h√≥a n√∫t "T·∫°o nguy√™n v·∫≠t li·ªáu"
  const isCreateDisabled = () => {
    return loading || !!productCodeError;
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-[500px]">
        <div className="flex justify-between items-center mb-4">
          <Typography variant="h6">T·∫°o nguy√™n v·∫≠t li·ªáu m·ªõi</Typography>
          <button className="text-gray-500 hover:text-gray-700" onClick={onClose}>
            ‚úï
          </button>
        </div>
        <div className="grid grid-cols-2 gap-4 mb-4">
          {/* M√£ nguy√™n v·∫≠t li·ªáu */}
          <div>
            <Typography variant="small" className="mb-2">M√£ nguy√™n v·∫≠t li·ªáu *</Typography>
            <Input
              type="text"
              value={newMaterial.materialCode || ""}
              onChange={(e) => handleCheckMaterialCode(e.target.value)}
              className={`w-full ${errors.materialCode || productCodeError || validationErrors.materialCode ? "border-red-500" : ""}`}
            />
            {productCodeError && (
              <Typography className="text-xs text-red-500 mt-1">
                {productCodeError}
              </Typography>
            )}
            {validationErrors.materialCode && (
              <Typography className="text-xs text-red-500 mt-1">
                {validationErrors.materialCode}
              </Typography>
            )}
            {errors.materialCode && !productCodeError && !validationErrors.materialCode && (
              <Typography className="text-xs text-red-500 mt-1">
                {errors.materialCode}
              </Typography>
            )}
          </div>

          {/* T√™n nguy√™n v·∫≠t li·ªáu */}
          <div>
            <Typography variant="small" className="mb-2">T√™n nguy√™n v·∫≠t li·ªáu *</Typography>
            <Input
              type="text"
              value={newMaterial.materialName || ""}
              onChange={(e) => handleMaterialNameChange(e.target.value)}
              className={`w-full ${errors.materialName || validationErrors.materialName ? "border-red-500" : ""}`}
            />
            {validationErrors.materialName && (
              <Typography className="text-xs text-red-500 mt-1">
                {validationErrors.materialName}
              </Typography>
            )}
            {errors.materialName && !validationErrors.materialName && (
              <Typography className="text-xs text-red-500 mt-1">
                {errors.materialName}
              </Typography>
            )}
          </div>

          {/* ƒê∆°n v·ªã */}
          <div>
            <Typography variant="small" className="mb-2">ƒê∆°n v·ªã *</Typography>
            <Select
              value={newMaterial.unitId || ""}
              onChange={(value) => setNewMaterial({ ...newMaterial, unitId: value })}
              className={`w-full ${errors.unitId || (validationErrors.unitId && !newMaterial.unitId) ? "border-red-500" : ""}`}
              label={newMaterial.unitId ? "" : "Ch·ªçn ƒë∆°n v·ªã"}
            >
              {units.length > 0 ? (
                units.map((unit) => (
                  <Option key={unit.unitId} value={String(unit.unitId)}>
                    {unit.unitName}
                  </Option>
                ))
              ) : (
                <Option disabled>Kh√¥ng c√≥ ƒë∆°n v·ªã n√†o</Option>
              )}
            </Select>
            {validationErrors.unitId && (
              <Typography className="text-xs text-red-500 mt-1">
                {validationErrors.unitId}
              </Typography>
            )}
            {errors.unitId && !validationErrors.unitId && (
              <Typography className="text-xs text-red-500 mt-1">
                {errors.unitId}
              </Typography>
            )}
          </div>

          {/* Danh m·ª•c */}
          <div>
            <Typography variant="small" className="mb-2">Danh m·ª•c *</Typography>
            <Select
              value={newMaterial.typeId || ""}
              onChange={(value) => setNewMaterial({ ...newMaterial, typeId: value })}
              className={`w-full ${errors.typeId || (validationErrors.typeId && !newMaterial.typeId) ? "border-red-500" : ""}`}
              label={newMaterial.typeId ? "" : "Ch·ªçn danh m·ª•c"}
            >
              {materialCategories.length > 0 ? (
                materialCategories.map((category) => (
                  <Option key={category.materialTypeId} value={String(category.materialTypeId)}>
                    {category.name}
                  </Option>
                ))
              ) : (
                <Option disabled>Kh√¥ng c√≥ danh m·ª•c n√†o</Option>
              )}
            </Select>
            {validationErrors.typeId && (
              <Typography className="text-xs text-red-500 mt-1">
                {validationErrors.typeId}
              </Typography>
            )}
            {errors.typeId && !validationErrors.typeId && (
              <Typography className="text-xs text-red-500 mt-1">
                {errors.typeId}
              </Typography>
            )}
          </div>

          {/* M√¥ t·∫£ */}
          <div className="col-span-2">
            <Typography variant="small" className="mb-2">M√¥ t·∫£</Typography>
            <Input
              type="text"
              value={newMaterial.description || ""}
              onChange={(e) => setNewMaterial({ ...newMaterial, description: e.target.value })}
              className={`w-full ${errors.description ? "border-red-500" : ""}`}
            />
            {errors.description && (
              <Typography className="text-xs text-red-500 mt-1">{errors.description}</Typography>
            )}
          </div>

          {/* H√¨nh ·∫£nh nguy√™n v·∫≠t li·ªáu */}
          <div className="col-span-2">
            <Typography variant="small" className="mb-2">H√¨nh ·∫£nh nguy√™n v·∫≠t li·ªáu</Typography>
            <Input
              type="file"
              accept="image/*"
              onChange={(e) => {
                const file = e.target.files[0];
                if (file) {
                  if (file.size > 5 * 1024 * 1024) {
                    alert("K√≠ch th∆∞·ªõc file kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 5MB");
                    e.target.value = "";
                    return;
                  }
                  const imageUrl = URL.createObjectURL(file);
                  setNewMaterial((prev) => ({
                    ...prev,
                    image: file,
                    imageUrl: imageUrl,
                  }));
                }
              }}
              className="w-full"
            />

            {newMaterial.imageUrl && (
              <div className="mt-2 relative">
                <img
                  src={newMaterial.imageUrl}
                  alt="Preview"
                  className="w-32 h-32 object-cover rounded-lg border"
                />
              </div>
            )}
          </div>
        </div>

        <div className="flex justify-end gap-2">
          <Button color="gray" onClick={onClose} disabled={loading}>
            H·ªßy
          </Button>
          <Button color="blue" onClick={handleCreateMaterialWrapper} disabled={isCreateDisabled()}>
            {loading ? "ƒêang x·ª≠ l√Ω..." : "T·∫°o nguy√™n v·∫≠t li·ªáu"}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default CreateMaterialModal;