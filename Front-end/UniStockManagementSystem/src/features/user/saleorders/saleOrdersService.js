import axios from "axios";

const API_URL = "http://localhost:8080/api/unistock/user/sale-orders"; // ‚úÖ API Sale Orders

// ‚úÖ H√†m ƒë·ªÉ l·∫•y Token t·ª´ LocalStorage
const authHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { Authorization: `Bearer ${token}` } : {};
};

// üü¢ **L·∫•y danh s√°ch Sale Orders (H·ªó tr·ª£ ph√¢n trang)**
export const getSaleOrders = async (page, size) => {
  try {
    const response = await axios.get(API_URL, {
      params: { page, size },
      headers: authHeader(),
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå [getSaleOrders] L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng:", error);
    throw error;
  }
};

export const getNextOrderCode = async () => {
  try {
    const response = await axios.get(`${API_URL}/next-code`, {
      headers: authHeader(),
    });
    return response.data; // M√£ ƒë∆°n h√†ng, v√≠ d·ª• "ƒêH00003"
  } catch (error) {
    console.error("‚ùå [getNextOrderCode] L·ªói:", error);
    throw error;
  }
};

// üü¢ **L·∫•y chi ti·∫øt Sale Order theo ID**
export const getSaleOrderById = async (orderId) => {
  try {
    const response = await axios.get(`${API_URL}/${orderId}`, {
      headers: authHeader(),
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå [getSaleOrderById] L·ªói khi l·∫•y ƒë∆°n h√†ng:", error);
    throw error;
  }
};

// üü¢ **T·∫°o m·ªõi Sale Order**
export const createSaleOrder = async (orderData) => {
  try {
    const response = await axios.post(API_URL, orderData, {
      headers: { ...authHeader(), "Content-Type": "application/json" },
    });
    console.log("‚úÖ [createSaleOrder] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [createSaleOrder] L·ªói khi t·∫°o ƒë∆°n h√†ng:", error);
    throw error;
  }
};

// üü¢ **C·∫≠p nh·∫≠t Sale Order**
export const updateSaleOrder = async (orderId, orderData) => {
  try {
    const response = await axios.put(`${API_URL}/${orderId}`, orderData, {
      headers: { ...authHeader(), "Content-Type": "application/json" },
    });
    console.log("‚úÖ [updateSaleOrder] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [updateSaleOrder] L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
    throw error;
  }
};

// üî¥ **X√≥a Sale Order**
export const deleteSaleOrder = async (orderId) => {
  try {
    await axios.delete(`${API_URL}/${orderId}`, { headers: authHeader() });
    console.log(`‚úÖ [deleteSaleOrder] ƒê√£ x√≥a ƒë∆°n h√†ng c√≥ ID: ${orderId}`);
  } catch (error) {
    console.error("‚ùå [deleteSaleOrder] L·ªói khi x√≥a ƒë∆°n h√†ng:", error);
    throw error;
  }
};

// üîÑ **Toggle tr·∫°ng th√°i Sale Order**
export const toggleSaleOrderStatus = async (orderId, newStatus) => {
  try {
    const response = await axios.patch(
      `${API_URL}/${orderId}/status`,
      { status: newStatus },
      { headers: authHeader() }
    );
    console.log("‚úÖ [toggleSaleOrderStatus] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [toggleSaleOrderStatus] L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    throw error;
  }
};

// üì• **Import Sale Orders t·ª´ Excel**
export const importSaleOrders = async (file) => {
  try {
    const formData = new FormData();
    formData.append("file", file);

    const response = await axios.post(`${API_URL}/import`, formData, {
      headers: {
        ...authHeader(),
        "Content-Type": "multipart/form-data",
      },
    });
    console.log("‚úÖ [importSaleOrders] API Response:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå [importSaleOrders] L·ªói khi import ƒë∆°n h√†ng:", error);
    throw error;
  }
};

// üì§ **Export Sale Orders ra Excel**
export const exportSaleOrders = async () => {
  try {
    const response = await axios.get(`${API_URL}/export`, {
      responseType: "blob",
      headers: authHeader(),
    });

    // ‚úÖ T·∫°o link t·∫£i file Excel
    const url = window.URL.createObjectURL(new Blob([response.data]));
    const link = document.createElement("a");
    link.href = url;
    link.setAttribute("download", "SaleOrders.xlsx");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    console.log("‚úÖ [exportSaleOrders] ƒê√£ xu·∫•t file Excel.");
    return true;
  } catch (error) {
    console.error("‚ùå [exportSaleOrders] L·ªói khi xu·∫•t ƒë∆°n h√†ng:", error);
    throw error;
  }
};
