import { useState } from "react";
import { getSaleOrders, toggleSaleOrdersStatus } from "./saleOrdersService";

const useSaleOrders = () => {
  const [saleOrders, setSaleOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchSaleOrders = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await getSaleOrders();

      console.log("üìä D·ªØ li·ªáu API tr·∫£ v·ªÅ:", JSON.stringify(data, null, 2));

      if (Array.isArray(data)) {
        setSaleOrders(data);
      } else if (data && data.data && Array.isArray(data.data)) {
        setSaleOrders(data.data);
      } else {
        setSaleOrders([]);
        console.error("‚ùå API kh√¥ng tr·∫£ v·ªÅ danh s√°ch h·ª£p l·ªá:", data);
      }

      return data;
    } catch (err) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng", err);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng");
      setSaleOrders([]);
      return [];
    } finally {
      setLoading(false);
    }
  };


  // C·∫≠p nh·∫≠t tr·∫°ng th√°i
  const toggleStatus = async (typeId, currentStatus) => {
    try {
      setLoading(true);
      const newStatus = !currentStatus; // ƒê·∫£o tr·∫°ng th√°i hi·ªán t·∫°i
      const updatedSaleOrder = await toggleSaleOrdersStatus(typeId, newStatus);

      // C·∫≠p nh·∫≠t state ƒë·ªÉ UI hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
      setSaleOrders((prevSaleOrders) =>
        prevSaleOrders.map((saleOrder) =>
          saleOrder.typeId === typeId
            ? { ...saleOrder, status: updatedSaleOrder.status }
            : saleOrder
        )
      );

      const updateOrder = async (orderData) => {
        try {
          setLoading(true);
          await updateSaleOrders(orderData);
          await fetchSaleOrders(); // L√†m m·ªõi danh s√°ch
        } catch (error) {
          console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
          setError("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng");
        } finally {
          setLoading(false);
        }
      };


      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ƒë∆°n h√†ng ${typeId} th√†nh ${newStatus ? "Ho·∫°t ƒë·ªông" : "V√¥ hi·ªáu h√≥a"}`);
      return updatedSaleOrder;
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
      setError("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng");
      throw error;
    } finally {
      setLoading(false);
    }
  };

  return {
    saleOrders,
    loading,
    error,
    fetchSaleOrders,
    toggleStatus
  };
};

export default useSaleOrders;