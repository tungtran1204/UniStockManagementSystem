import { useState } from "react";
import { getSaleOrders, toggleSaleOrdersStatus } from "./saleOrdersService";

const useSaleOrders = () => {
  const [saleOrders, setSaleOrders] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchSaleOrders = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await getSaleOrders();
      
      // Asegurarse de que data sea un array
      if (Array.isArray(data)) {
        setSaleOrders(data);
        console.log("üìä ƒê√£ t·∫£i xong danh s√°ch ƒë∆°n h√†ng:", data.length, "items");
      } else {
        console.warn("‚ö†Ô∏è API tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng ph·∫£i array:", data);
        // Si no es un array, intentar extraer los datos de alguna propiedad com√∫n
        if (data && typeof data === 'object') {
          if (data.data && Array.isArray(data.data)) {
            setSaleOrders(data.data);
            console.log("üìä ƒê√£ t·∫£i xong danh s√°ch ƒë∆°n h√†ng t·ª´ data.data:", data.data.length, "items");
          } else if (data.content && Array.isArray(data.content)) {
            setSaleOrders(data.content);
            console.log("üìä ƒê√£ t·∫£i xong danh s√°ch ƒë∆°n h√†ng t·ª´ data.content:", data.content.length, "items");
          } else if (data.items && Array.isArray(data.items)) {
            setSaleOrders(data.items);
            console.log("üìä ƒê√£ t·∫£i xong danh s√°ch ƒë∆°n h√†ng t·ª´ data.items:", data.items.length, "items");
          } else {
            setSaleOrders([]);
            console.error("‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API:", data);
          }
        } else {
          setSaleOrders([]);
          console.error("‚ùå D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:", data);
        }
      }
      
      return data;
    } catch (err) {
      console.error("‚ùå Failed to fetch sale orders", err);
      setError("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng");
      setSaleOrders([]);
      return [];
    } finally {
      setLoading(false);
    }
  };

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i
  const toggleStatus = async (typeId, currentStatus) => {
    try {
      setLoading(true);
      const newStatus = !currentStatus; // ƒê·∫£o tr·∫°ng th√°i hi·ªán t·∫°i
      const updatedSaleOrder = await toggleSaleOrdersStatus(typeId, newStatus);
      
      // C·∫≠p nh·∫≠t state ƒë·ªÉ UI hi·ªÉn th·ªã ngay l·∫≠p t·ª©c
      setSaleOrders((prevSaleOrders) =>
        prevSaleOrders.map((saleOrder) =>
          saleOrder.typeId === typeId
            ? { ...saleOrder, status: updatedSaleOrder.status }
            : saleOrder
        )
      );
      
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ƒë∆°n h√†ng ${typeId} th√†nh ${newStatus ? "Ho·∫°t ƒë·ªông" : "V√¥ hi·ªáu h√≥a"}`);
      return updatedSaleOrder;
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
      setError("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng");
      throw error;
    } finally {
      setLoading(false);
    }
  };

  return { 
    saleOrders, 
    loading,
    error,
    fetchSaleOrders, 
    toggleStatus 
  };
};

export default useSaleOrders;