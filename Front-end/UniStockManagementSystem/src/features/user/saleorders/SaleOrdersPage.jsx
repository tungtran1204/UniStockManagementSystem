import React, { useEffect, useState } from "react";
import useSaleOrders from "./useSaleOrders";
import {
  createSaleOrders,
  updateSaleOrders,
  getSaleOrderById,
} from "./saleOrdersService";
import {
  Card,
  CardHeader,
  CardBody,
  Typography,
  Input,
  Textarea,
  Button,
  Tooltip,
  Select,
  Option,
} from "@material-tailwind/react";
import { FaEdit, FaPlus, FaEye } from "react-icons/fa";


const SaleOrdersPage = () => {
  const { saleOrders, fetchSaleOrders, toggleStatus } = useSaleOrders();
  const [showCreatePopup, setShowCreatePopup] = useState(false);
  const [showEditPopup, setShowEditPopup] = useState(false);
  const [showDetailPopup, setShowDetailPopup] = useState(false);
  const [editSaleOrder, setEditSaleOrder] = useState(null);
  const [selectedOrder, setSelectedOrder] = useState({
    orderDetails: [],
  });
  const [errorMessage, setErrorMessage] = useState("");
  const [errorOrderId, setErrorOrderId] = useState("");
  const [errorCustomerName, setErrorCustomerName] = useState("");

  const resetErrorMessages = () => {
    setErrorMessage("");
    setErrorOrderId("");
    setErrorCustomerName("");
  };
  // State cho form t·∫°o order m·ªõi
  const [newSaleOrder, setNewSaleOrder] = useState({
    nextOrderId: "ƒêang t·∫£i...",
    partnerName: "",
    orderDate: new Date().toISOString().split("T")[0],
    note: "",
    productDetails: []
  });


  // State cho tr∆∞·ªùng s·∫£n ph·∫©m t·∫°m th·ªùi
  const [tempProduct, setTempProduct] = useState({
    productId: "",
    quantity: ""
  });


  useEffect(() => {
    fetchSaleOrders().then((data) => {
      console.log("üì¢ API tr·∫£ v·ªÅ danh s√°ch SaleOrder:", data);
      // Gi·∫£ l·∫≠p vi·ªác l·∫•y ID ti·∫øp theo t·ª´ server
      const nextId = data && data.length > 0 ? Math.max(...data.map(order =>
        typeof order.orderId === 'number' ? order.orderId : parseInt(order.orderId) || 0)) + 1 : 1;
      setNewSaleOrder(prev => ({ ...prev, nextOrderId: nextId.toString() }));
    });
  }, []);


  // Th√™m s·∫£n ph·∫©m v√†o danh s√°ch
  const addProductToOrder = () => {
    if (!tempProduct.productId || !tempProduct.quantity) {
      setErrorMessage("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√£ s·∫£n ph·∫©m v√† s·ªë l∆∞·ª£ng");
      return;
    }

    setNewSaleOrder({
      ...newSaleOrder,
      productDetails: [...newSaleOrder.productDetails, { ...tempProduct }]
    });

    // Reset form nh·∫≠p s·∫£n ph·∫©m
    setTempProduct({ productId: "", quantity: "" });
  };


  // X√≥a s·∫£n ph·∫©m kh·ªèi danh s√°ch
  const removeProductFromOrder = (index) => {
    const updatedProducts = [...newSaleOrder.productDetails];
    updatedProducts.splice(index, 1);
    setNewSaleOrder({
      ...newSaleOrder,
      productDetails: updatedProducts
    });
  };


  const validateSaleOrder = (saleOrder) => {
    let isValid = true;
    setErrorCustomerName("");
    setErrorMessage("");


    if (typeof saleOrder.partnerName === 'string' && !saleOrder.partnerName.trim()) {
      setErrorCustomerName("T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      isValid = false;
    } else if (!saleOrder.partnerName) {
      setErrorCustomerName("T√™n kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
      isValid = false;
    }


    if (!saleOrder.productDetails || saleOrder.productDetails.length === 0) {
      setErrorMessage("C·∫ßn c√≥ √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m trong ƒë∆°n h√†ng.");
      isValid = false;
    }


    return isValid;
  };


  const handleCreateSaleOrder = async () => {



    if (!validateSaleOrder(newSaleOrder)) {
      return; // N·∫øu c√≥ l·ªói, d·ª´ng kh√¥ng g·ªçi API
    }


    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒëi

      const orderData = {
        orderId: newSaleOrder.nextOrderId,
        partnerName: newSaleOrder.partnerName,
        status: "PENDING", // Lu√¥n l√† PENDING khi t·∫°o m·ªõi
        orderDate: newSaleOrder.orderDate,
        note: newSaleOrder.note,
        orderDetails: newSaleOrder.productDetails.map(product => ({
          productId: product.productId,
          quantity: product.quantity
        }))
      };

      // ƒê·∫∑t console.log sau khi orderData ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
      console.log("üìù D·ªØ li·ªáu g·ª≠i l√™n Backend:", JSON.stringify(orderData, null, 2));

      console.log("D·ªØ li·ªáu g·ª≠i l√™n API:", orderData);
      await createSaleOrders(orderData);

      const updatedOrders = await fetchSaleOrders(); // T·∫£i l·∫°i danh s√°ch sau khi t·∫°o m·ªõi
      console.log("‚úÖ ƒê√£ t·∫°o m·ªõi v√† t·∫£i l·∫°i danh s√°ch:", updatedOrders);
      setShowCreatePopup(false);

      // Reset form
      setNewSaleOrder({
        nextOrderId: (parseInt(newSaleOrder.nextOrderId) + 1).toString(),
        partnerName: "",
        orderDate: new Date().toISOString().split("T")[0],
        note: "",
        productDetails: []
      });

      setTempProduct({ productId: "", quantity: "" });
      setErrorMessage("");
    } catch (error) {
      console.error("L·ªói khi t·∫°o order:", error);
      if (error.response && error.response.status === 409) {
        const errorCode = error.response.data;


        if (errorCode === "DUPLICATE_CODE_AND_NAME") {
          setErrorMessage("M√£ order v√† t√™n kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i.");
        } else if (errorCode === "DUPLICATE_CODE") {
          setErrorMessage("M√£ order ƒë√£ t·ªìn t·∫°i.");
        } else if (errorCode === "DUPLICATE_NAME") {
          setErrorCustomerName("T√™n kh√°ch h√†ng ƒë√£ t·ªìn t·∫°i.");
        }
      } else {
        setErrorMessage("L·ªói khi t·∫°o order! Vui l√≤ng th·ª≠ l·∫°i.");
      }
    }
  };


  const handleEditSaleOrder = async () => {
    if (!editSaleOrder) return;

    try {
      console.log("üì§ G·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t:", editSaleOrder);

      await updateSaleOrders({
        orderId: editSaleOrder.orderId,
        status: editSaleOrder.status
      });

      // C·∫≠p nh·∫≠t UI sau khi ch·ªânh s·ª≠a
      const updatedOrders = await fetchSaleOrders();
      console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t danh s√°ch:", updatedOrders);

      setShowEditPopup(false);
      setEditSaleOrder(null);
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng:", error);
    }
  };

  const handleViewDetails = async (order) => {
    console.log("üõ†Ô∏è Ki·ªÉm tra order:", order);

    if (!order || !order.orderId) {
      console.warn("‚ö† L·ªói: orderId kh√¥ng h·ª£p l·ªá!", order);
      return;
    }

    const orderDetails = await getSaleOrderById(order.orderId); // Ch·∫Øc ch·∫Øn orderId l√† s·ªë
    console.log("‚úÖ API tr·∫£ v·ªÅ:", orderDetails);

    setSelectedOrder(orderDetails);
    setShowDetailPopup(true);
  };





  const formatDate = (dateString) => {
    if (!dateString) return "";
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };


  // Inline styles
  const styles = {
    table: {
      width: "100%",
      minWidth: "640px",
      tableLayout: "auto",
    },
    noData: {
      borderBottom: "1px solid #e5e7eb",
      padding: "12px",
      textAlign: "center",
      color: "#6b7280",
    },
    actionBtns: {
      display: "flex",
      alignItems: "center",
      gap: "8px",
      paddingLeft: "16px",
    },
    editBtn: {
      padding: "8px 10px",
      borderRadius: "50%",
      backgroundColor: "#3b82f6",
      color: "white",
      cursor: "pointer",
    },
    viewBtn: {
      padding: "8px 10px",
      borderRadius: "50%",
      backgroundColor: "#10b981",
      color: "white",
      cursor: "pointer",
    },
    modal: {
      position: "fixed",
      inset: 0,
      backgroundColor: "rgba(0,0,0,0.5)",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      zIndex: 50,
    },
    modalContent: {
      backgroundColor: "white",
      borderRadius: "8px",
      padding: "24px",
      width: "500px",
      maxWidth: "90vw",
      maxHeight: "90vh",
      overflowY: "auto",
    },
    modalHeader: {
      display: "flex",
      justifyContent: "space-between",
      alignItems: "center",
      marginBottom: "16px",
    },
    closeBtn: {
      backgroundColor: "transparent",
      border: "none",
      fontSize: "20px",
      cursor: "pointer",
      color: "#6b7280",
    },
    formGrid: {
      display: "grid",
      gridTemplateColumns: "repeat(2, 1fr)",
      gap: "16px",
      marginBottom: "16px",
    },
    fullWidth: {
      gridColumn: "span 2",
    },
    errorText: {
      color: "#ef4444",
      fontSize: "12px",
      marginTop: "4px",
    },
    actionButtons: {
      display: "flex",
      justifyContent: "flex-end",
      gap: "8px",
    },
    detailsTable: {
      width: "100%",
      borderCollapse: "collapse",
      marginTop: "16px",
    },
    detailsTableHeader: {
      backgroundColor: "#f9fafb",
      padding: "8px 16px",
      textAlign: "left",
      borderBottom: "1px solid #e5e7eb",
    },
    detailsTableCell: {
      padding: "8px 16px",
      borderBottom: "1px solid #e5e7eb",
    },
  };


  return (
    <div className="mt-12 mb-8 flex flex-col gap-12">
      <Card>
        <CardHeader variant="gradient" color="gray" className="mb-8 p-6">
          <div className="flex justify-between items-center">
            <Typography variant="h6" color="white">
              Danh s√°ch ƒë∆°n ƒë·∫∑t h√†ng
            </Typography>
            <div className="flex gap-2">
              <Button
                size="sm"
                color="white"
                variant="text"
                className="flex items-center gap-2"
                onClick={() => {
                  setShowCreatePopup(true);
                }}
              >
                <FaPlus className="h-4 w-4" /> T·∫°o ƒë∆°n ƒë·∫∑t h√†ng
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardBody className="overflow-x-scroll px-0 pt-0 pb-2">
          <table style={styles.table}>
            <thead>
              <tr>
                {["NG√ÄY T·∫†O ƒê∆†N", "M√É ƒê∆†N H√ÄNG", "T√äN KH√ÅCH H√ÄNG", "T√åNH TR·∫†NG ƒê∆†N H√ÄNG", "H√ÄNH ƒê·ªòNG"].map((el) => (
                  <th
                    key={el}
                    className="border-b border-blue-gray-50 py-3 px-5 text-left"
                  >
                    <Typography
                      variant="small"
                      className="text-[11px] font-bold uppercase text-blue-gray-400"
                    >
                      {el}
                    </Typography>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {saleOrders && saleOrders.length > 0 ? (
                saleOrders.map(({ typeId, orderId, partnerName, totalAmount, status, orderDate, note }, key) => {
                  const className = `py-3 px-5 ${key === saleOrders.length - 1 ? "" : "border-b border-blue-gray-50"
                    }`;


                  return (
                    <tr key={typeId || key}>
                      <td className={className}>
                        <Typography
                          variant="small"
                          color="blue-gray"
                          className="font-semibold"
                        >
                          {formatDate(orderDate)}
                        </Typography>
                      </td>
                      <td className={className}>
                        <Typography
                          variant="small"
                          color="blue-gray"
                          className="font-semibold"
                        >
                          {orderId}
                        </Typography>
                      </td>
                      <td className={className}>
                        <Typography
                          variant="small"
                          color="blue-gray"
                          className="font-semibold"
                        >
                          {partnerName || "Kh√¥ng c√≥ t√™n"}
                        </Typography>
                      </td>
                      <td className={className}>
                        <div className={`px-2 py-1 rounded-full text-xs font-semibold inline-block ${status === "DELIVERED" ? "bg-green-100 text-green-800" :
                          status === "PENDING" ? "bg-yellow-100 text-yellow-800" :
                            status === "CONFIRMED" ? "bg-blue-100 text-blue-800" :
                              status === "SHIPPED" ? "bg-indigo-100 text-indigo-800" :
                                status === "CANCELED" ? "bg-red-100 text-red-800" :
                                  status === "RETURNED" ? "bg-purple-100 text-purple-800" :
                                    status === true || status === "true" ? "bg-green-100 text-green-800" :
                                      status === false || status === "false" ? "bg-red-100 text-red-800" :
                                        "bg-gray-100 text-gray-800"
                          }`}>
                          {status === true || status === "true" ? "ACTIVE" :
                            status === false || status === "false" ? "INACTIVE" :
                              status || "UNKNOWN"}
                        </div>
                      </td>
                      <td className={className}>
                        <div style={styles.actionBtns}>
                          <Tooltip content="Xem chi ti·∫øt">
                            <button
                              onClick={() => handleViewDetails({ typeId, orderId, partnerName, totalAmount, status, orderDate, note })}
                              style={styles.viewBtn}
                            >
                              <FaEye />
                            </button>
                          </Tooltip>
                          <Tooltip content="Ch·ªânh s·ª≠a">
                            <button
                              onClick={() => {
                                resetErrorMessages();

                                if (!orderId) {
                                  console.error("‚ùå L·ªói: orderId kh√¥ng t·ªìn t·∫°i!", orderId);
                                  return;
                                }

                                // T√¨m ƒë∆°n h√†ng trong danh s√°ch
                                const order = saleOrders.find(o => o.orderId === orderId);
                                if (!order) {
                                  console.error("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi ID:", orderId);
                                  return;
                                }

                                console.log("üõ†Ô∏è Ch·ªânh s·ª≠a ƒë∆°n h√†ng:", order);

                                setEditSaleOrder({
                                  orderId: order.orderId,
                                  partnerName: order.partnerName || "Kh√¥ng c√≥ t√™n",
                                  status: order.status || "PENDING",
                                  orderDate: order.orderDate || new Date().toISOString().split("T")[0],
                                  note: order.note || "",
                                  productDetails: Array.isArray(order.orderDetails)
                                    ? order.orderDetails.map(detail => ({
                                      productId: detail.productId || "",
                                      productName: detail.productName || "",
                                      unitName: detail.unitName || "",
                                      quantity: detail.quantity || 1
                                    }))
                                    : []
                                });

                                setShowEditPopup(true);
                              }}
                              style={styles.editBtn}
                            >
                              <FaEdit />
                            </button>
                          </Tooltip>

                        </div>
                      </td>
                    </tr>
                  );
                })
              ) : (
                <tr>
                  <td
                    colSpan="5"
                    style={styles.noData}
                  >
                    Kh√¥ng c√≥ d·ªØ li·ªáu
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </CardBody>
      </Card>


      {/* Popup t·∫°o order m·ªõi */}
      {showCreatePopup && (
        <div style={styles.modal}>
          <div style={styles.modalContent}>
            <div style={styles.modalHeader}>
              <Typography variant="h6">T·∫°o order m·ªõi</Typography>
              <button
                style={styles.closeBtn}
                onClick={() => {

                  setShowCreatePopup(false);
                }}
              >
                ‚úï
              </button>
            </div>

            {errorMessage && (
              <Typography variant="small" color="red" className="mb-4">
                {errorMessage}
              </Typography>
            )}

            <div style={styles.formGrid}>
              <div style={styles.fullWidth}>
                <Typography variant="small" className="mb-2">M√£ order *</Typography>
                <Input
                  type="text"
                  value={newSaleOrder.nextOrderId}
                  disabled
                  className="w-full bg-gray-100"
                />
              </div>

              <div style={styles.fullWidth}>
                <Typography variant="small" className="mb-2">T√™n kh√°ch h√†ng *</Typography>
                <Input
                  type="text"
                  value={newSaleOrder.partnerName}
                  onChange={(e) => {
                    setNewSaleOrder({ ...newSaleOrder, partnerName: e.target.value });
                    setErrorCustomerName("");
                  }}
                  className="w-full"
                />
                {errorCustomerName && <Typography variant="small" color="red">{errorCustomerName}</Typography>}
              </div>

              <div style={styles.fullWidth}>
                <Typography variant="small" className="mb-2">Ng√†y ƒë·∫∑t h√†ng *</Typography>
                <Input
                  type="date"
                  value={newSaleOrder.orderDate}
                  onChange={(e) => {
                    setNewSaleOrder({ ...newSaleOrder, orderDate: e.target.value });
                  }}
                  className="w-full"
                />
              </div>

              <div style={styles.fullWidth}>
                <Typography variant="small" className="mb-2">Danh s√°ch s·∫£n ph·∫©m *</Typography>

                <div className="mb-3 p-2 border rounded">
                  <div className="flex mb-2">
                    <div className="flex-1 mr-2">
                      <Input
                        type="text"
                        placeholder="M√£ s·∫£n ph·∫©m"
                        value={tempProduct.productId}
                        onChange={(e) => setTempProduct({ ...tempProduct, productId: e.target.value })}
                        className="w-full"
                      />
                    </div>
                    <div className="flex-1 mr-2">
                      <Input
                        type="number"
                        placeholder="S·ªë l∆∞·ª£ng"
                        value={tempProduct.quantity}
                        onChange={(e) => setTempProduct({ ...tempProduct, quantity: e.target.value })}
                        className="w-full"
                      />
                    </div>
                    <Button
                      color="blue"
                      size="sm"
                      onClick={addProductToOrder}
                    >
                      Th√™m
                    </Button>
                  </div>
                </div>

                {newSaleOrder.productDetails.length > 0 ? (
                  <table className="w-full border-collapse">
                    <thead>
                      <tr>
                        <th className="border p-2 text-left">M√£ s·∫£n ph·∫©m</th>
                        <th className="border p-2 text-left">S·ªë l∆∞·ª£ng</th>
                        <th className="border p-2 text-center">X√≥a</th>
                      </tr>
                    </thead>
                    <tbody>
                      {newSaleOrder.productDetails.map((product, index) => (
                        <tr key={index}>
                          <td className="border p-2">{product.productId}</td>
                          <td className="border p-2">{product.quantity}</td>
                          <td className="border p-2 text-center">
                            <button
                              onClick={() => removeProductFromOrder(index)}
                              className="text-red-500 hover:text-red-700"
                            >
                              ‚úï
                            </button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                ) : (
                  <Typography variant="small" className="text-gray-500">
                    Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c th√™m
                  </Typography>
                )}
              </div>

              <div style={styles.fullWidth}>
                <Typography variant="small" className="mb-2">Ghi ch√∫</Typography>
                <Textarea
                  value={newSaleOrder.note}
                  onChange={(e) => setNewSaleOrder({ ...newSaleOrder, note: e.target.value })}
                  className="w-full"
                />
              </div>
            </div>

            <div style={styles.actionButtons}>
              <Button
                color="gray"
                onClick={() => setShowCreatePopup(false)}
              >
                H·ª¶Y
              </Button>
              <Button
                color="blue"
                onClick={handleCreateSaleOrder}
              >
                L∆ØU
              </Button>
            </div>
          </div>
        </div>
      )}


      {/* Popup ch·ªânh s·ª≠a ƒë∆°n h√†ng */}
      {showEditPopup && editSaleOrder && (
        <div style={styles.modal}>
          <div style={styles.modalContent}>
            <div style={styles.modalHeader}>
              <Typography variant="h6">Ch·ªânh s·ª≠a ƒë∆°n h√†ng #{editSaleOrder.orderId}</Typography>
              <button style={styles.closeBtn} onClick={() => setShowEditPopup(false)}>‚úï</button>
            </div>

            <div style={styles.formGrid}>
              <div>
                <Typography variant="small" className="font-bold">M√£ ƒë∆°n h√†ng:</Typography>
                <Typography variant="small">{editSaleOrder.orderId}</Typography>
              </div>
              <div>
                <Typography variant="small" className="font-bold">Kh√°ch h√†ng:</Typography>
                <Typography variant="small">{editSaleOrder.partnerName}</Typography>
              </div>
              <div>
                <Typography variant="small" className="font-bold">Tr·∫°ng th√°i:</Typography>
                <Select
                  value={editSaleOrder.status}
                  onChange={(value) => setEditSaleOrder({ ...editSaleOrder, status: value })}
                  className="w-full"
                >
                  <Option value="PENDING">Pending</Option>
                  <Option value="CONFIRMED">Confirmed</Option>
                  <Option value="SHIPPED">Shipped</Option>
                  <Option value="CANCELED">Canceled</Option>
                </Select>
              </div>
              <div>
                <Typography variant="small" className="font-bold">Ng√†y ƒë·∫∑t h√†ng:</Typography>
                <Typography variant="small">{editSaleOrder.orderDate}</Typography>
              </div>
              <div style={styles.fullWidth}>
                <Typography variant="small" className="font-bold">Ghi ch√∫:</Typography>
                <Typography variant="small">{editSaleOrder.note || "Kh√¥ng c√≥ ghi ch√∫"}</Typography>
              </div>
            </div>

            <div className="mt-6">
              <Typography variant="h6" className="mb-3">Chi ti·∫øt s·∫£n ph·∫©m</Typography>
              {editSaleOrder?.productDetails?.length > 0 ? (
                <table style={styles.detailsTable}>
                  <thead>
                    <tr>
                      <th style={styles.detailsTableHeader}>M√£ s·∫£n ph·∫©m</th>
                      <th style={styles.detailsTableHeader}>T√™n s·∫£n ph·∫©m</th>
                      <th style={styles.detailsTableHeader}>ƒê∆°n v·ªã</th>
                      <th style={styles.detailsTableHeader}>S·ªë l∆∞·ª£ng</th>
                    </tr>
                  </thead>
                  <tbody>
                    {editSaleOrder.productDetails.map((detail, index) => (
                      <tr key={index}>
                        <td style={styles.detailsTableCell}>{detail.productId || "N/A"}</td>
                        <td style={styles.detailsTableCell}>{detail.productName || "Kh√¥ng c√≥ t√™n"}</td>
                        <td style={styles.detailsTableCell}>{detail.unitName || "Kh√¥ng c√≥ ƒë∆°n v·ªã"}</td>
                        <td style={styles.detailsTableCell}>{detail.quantity || 0}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <Typography variant="small" className="text-red-500">
                  ‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt s·∫£n ph·∫©m
                </Typography>
              )}
            </div>

            <div style={styles.actionButtons} className="mt-4">
              <Button color="gray" onClick={() => setShowEditPopup(false)}>
                H·ª¶Y
              </Button>
              <Button color="blue" onClick={handleEditSaleOrder}>
                L∆ØU
              </Button>
            </div>
          </div>
        </div>
      )}


      {/* Popup xem chi ti·∫øt */}
      {showDetailPopup && selectedOrder && (
        <div style={styles.modal}>
          <div style={styles.modalContent}>
            <div style={styles.modalHeader}>
              <Typography variant="h6">Chi ti·∫øt ƒë∆°n h√†ng #{selectedOrder.orderId}</Typography>
              <button
                style={styles.closeBtn}
                onClick={() => setShowDetailPopup(false)}
              >
                ‚úï
              </button>
            </div>

            <div style={styles.formGrid}>
              <div>
                <Typography variant="small" className="font-bold">M√£ ƒë∆°n h√†ng:</Typography>
                <Typography variant="small">{selectedOrder.orderId}</Typography>
              </div>
              <div>
                <Typography variant="small" className="font-bold">Kh√°ch h√†ng:</Typography>
                <Typography variant="small">{selectedOrder.partnerName}</Typography>
              </div>
              <div>
                <Typography variant="small" className="font-bold">Tr·∫°ng th√°i:</Typography>
                <div className={`px-2 py-1 mt-1 rounded-full text-xs font-semibold inline-block ${selectedOrder.status === "DELIVERED" ? "bg-green-100 text-green-800" :
                  selectedOrder.status === "PENDING" ? "bg-yellow-100 text-yellow-800" :
                    selectedOrder.status === "CONFIRMED" ? "bg-blue-100 text-blue-800" :
                      selectedOrder.status === "SHIPPED" ? "bg-indigo-100 text-indigo-800" :
                        selectedOrder.status === "CANCELED" ? "bg-red-100 text-red-800" :
                          selectedOrder.status === "RETURNED" ? "bg-purple-100 text-purple-800" :
                            "bg-gray-100 text-gray-800"
                  }`}>
                  {selectedOrder.status}
                </div>
              </div>
              <div>
                <Typography variant="small" className="font-bold">Ng√†y ƒë·∫∑t h√†ng:</Typography>
                <Typography variant="small">{formatDate(selectedOrder.orderDate)}</Typography>
              </div>
              <div style={styles.fullWidth}>
                <Typography variant="small" className="font-bold">Ghi ch√∫:</Typography>
                <Typography variant="small">{selectedOrder.note || "Kh√¥ng c√≥ ghi ch√∫"}</Typography>
              </div>
            </div>


            <div className="mt-6">
              <Typography variant="h6" className="mb-3">Chi ti·∫øt s·∫£n ph·∫©m</Typography>
              {selectedOrder?.orderDetails?.length > 0 ? (
                <table style={styles.detailsTable}>
                  <thead>
                    <tr>
                      <th style={styles.detailsTableHeader}>M√£ s·∫£n ph·∫©m</th>
                      <th style={styles.detailsTableHeader}>T√™n s·∫£n ph·∫©m</th>
                      <th style={styles.detailsTableHeader}>ƒê∆°n v·ªã</th>
                      <th style={styles.detailsTableHeader}>S·ªë l∆∞·ª£ng</th>
                    </tr>
                  </thead>
                  <tbody>
                    {selectedOrder.orderDetails.map((detail, index) => (
                      <tr key={index}>
                        <td style={styles.detailsTableCell}>{detail.productId || "N/A"}</td>
                        <td style={styles.detailsTableCell}>{detail.productName || "Kh√¥ng c√≥ t√™n"}</td>
                        <td style={styles.detailsTableCell}>{detail.unitName || "Kh√¥ng c√≥ ƒë∆°n v·ªã"}</td>
                        <td style={styles.detailsTableCell}>{detail.quantity || 0}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <Typography variant="small" className="text-red-500">
                  ‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt s·∫£n ph·∫©m
                </Typography>
              )}


            </div>

            <div style={styles.actionButtons} className="mt-4">
              <Button color="gray" onClick={() => setShowDetailPopup(false)}>
                ƒê√≥ng
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};


export default SaleOrdersPage;

