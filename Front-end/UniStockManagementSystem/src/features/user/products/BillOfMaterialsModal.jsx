import React, { useState, useEffect } from 'react';
import {
  Typography,
  Button,
  Input,
  Select,
  Option,
} from "@material-tailwind/react";
import { FaPlus, FaTrash } from "react-icons/fa";
import axios from 'axios';

// H√†m l·∫•y token t·ª´ LocalStorage
const authHeader = () => {
  const token = localStorage.getItem("token");
  return token ? { Authorization: `Bearer ${token}` } : {};
};

const BillOfMaterialsModal = ({ show, onClose, product, onUpdate }) => {
  const [materials, setMaterials] = useState([]);
  const [productMaterials, setProductMaterials] = useState([]);
  const [selectedMaterial, setSelectedMaterial] = useState("");
  const [quantity, setQuantity] = useState(1);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (show && product) {
      fetchMaterials();
      fetchProductMaterials();
    }
  }, [show, product]);

  // L·∫•y danh s√°ch nguy√™n v·∫≠t li·ªáu
  const fetchMaterials = async () => {
    try {
      const response = await axios.get('http://localhost:8080/api/unistock/user/materials', {
        headers: authHeader(),
      });

      console.log("üìå API Materials Response:", response.data); // Debug API Response

      if (response.data && Array.isArray(response.data.content)) {
        setMaterials(response.data.content); // L·∫•y d·ªØ li·ªáu t·ª´ content
      } else {
        setMaterials([]); // N·∫øu API kh√¥ng tr·∫£ v·ªÅ m·∫£ng, ƒë·∫∑t v·ªÅ []
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y danh s√°ch nguy√™n v·∫≠t li·ªáu:", error);
      setMaterials([]); // N·∫øu l·ªói, ƒë·∫∑t v·ªÅ []
    }
  };



  // L·∫•y danh s√°ch nguy√™n v·∫≠t li·ªáu c·ªßa s·∫£n ph·∫©m
  const fetchProductMaterials = async () => {
    if (!product?.productId) return;

    try {
      const response = await axios.get(
        `http://localhost:8080/api/unistock/user/product-materials/${product.productId}`,
        { headers: authHeader() }
      );

      console.log("üìå API Product Materials Response:", response.data);

      if (Array.isArray(response.data)) {
        // üî• Ki·ªÉm tra n·∫øu `material` b·ªã thi·∫øu, t·ª± ƒë·ªông th√™m th√¥ng tin t·ª´ `materials` list
        const updatedMaterials = response.data.map(pm => {
          const materialData = materials.find(m => m.materialId === pm.materialId);
          return {
            ...pm,
            material: materialData || pm.material, // C·∫≠p nh·∫≠t d·ªØ li·ªáu t·ª´ danh s√°ch materials
          };
        });

        setProductMaterials(updatedMaterials);
      } else {
        console.error("‚ö†Ô∏è API Product Materials kh√¥ng h·ª£p l·ªá!");
        setProductMaterials([]);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l·∫•y ƒë·ªãnh m·ª©c nguy√™n v·∫≠t li·ªáu:", error);
      setProductMaterials([]);
    }
  };




  // Th√™m nguy√™n v·∫≠t li·ªáu v√†o danh s√°ch, n·∫øu tr√πng th√¨ c·ªông d·ªìn s·ªë l∆∞·ª£ng
  const handleAddMaterial = () => {
    if (!selectedMaterial || quantity <= 0) return;

    const materialToAdd = materials.find(m => m.materialId.toString() === selectedMaterial);
    if (!materialToAdd) return;

    setProductMaterials(prevMaterials => {
      const existingIndex = prevMaterials.findIndex(pm => pm.material?.materialId.toString() === selectedMaterial);

      if (existingIndex !== -1) {
        // N·∫øu nguy√™n v·∫≠t li·ªáu ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
        const updatedMaterials = [...prevMaterials];
        updatedMaterials[existingIndex].quantity = quantity; // ‚ö†Ô∏è Ghi ƒë√® s·ªë l∆∞·ª£ng thay v√¨ c·ªông d·ªìn
        return updatedMaterials;
      } else {
        // N·∫øu ch∆∞a c√≥, th√™m m·ªõi
        return [...prevMaterials, { material: materialToAdd, quantity }];
      }
    });

    setSelectedMaterial("");
    setQuantity(1);
  };

  // X√≥a nguy√™n v·∫≠t li·ªáu kh·ªèi danh s√°ch
  const handleRemoveMaterial = (index) => {
    setProductMaterials(prevMaterials => prevMaterials.filter((_, i) => i !== index));
  };

  // L∆∞u danh s√°ch nguy√™n v·∫≠t li·ªáu v√†o s·∫£n ph·∫©m
  const handleSave = async () => {
    if (!product?.productId) return;

    console.log("üìå Danh s√°ch v·∫≠t t∆∞ g·ª≠i l√™n:", productMaterials); // ‚úÖ Ki·ªÉm tra danh s√°ch tr∆∞·ªõc khi g·ª≠i API

    setLoading(true);
    try {
      await axios.post(
        `http://localhost:8080/api/unistock/user/product-materials/${product.productId}/materials`,
        productMaterials.map(pm => ({
          materialId: pm.material?.materialId,
          quantity: pm.quantity,
        })),
        { headers: authHeader() }
      );

      alert("‚úÖ C·∫≠p nh·∫≠t ƒë·ªãnh m·ª©c nguy√™n v·∫≠t li·ªáu th√†nh c√¥ng!");

      setTimeout(fetchProductMaterials, 500);
      onUpdate?.();
      onClose();
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãnh m·ª©c nguy√™n v·∫≠t li·ªáu:", error);
      alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãnh m·ª©c nguy√™n v·∫≠t li·ªáu!");
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteMaterial = async (materialId) => {
    if (!product?.productId) return;

    try {
      await axios.delete(`http://localhost:8080/api/unistock/user/product-materials/${product.productId}/materials/${materialId}`, {
        headers: authHeader(),
      });


      // C·∫≠p nh·∫≠t danh s√°ch sau khi x√≥a
      fetchProductMaterials();
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a v·∫≠t t∆∞:", error);
      alert("‚ùå Kh√¥ng th·ªÉ x√≥a v·∫≠t t∆∞!");
    }
  };




  if (!show) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-[800px] max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <Typography variant="h6">ƒê·ªãnh m·ª©c nguy√™n v·∫≠t li·ªáu - {product?.productName}</Typography>
          <button className="text-gray-500 hover:text-gray-700" onClick={onClose}>
            ‚úï
          </button>
        </div>

        {/* Form th√™m nguy√™n v·∫≠t li·ªáu */}
        {/* Form th√™m nguy√™n v·∫≠t li·ªáu */}
        <div className="mb-6 p-4 border border-gray-200 rounded-md">
          <Typography variant="small" className="mb-2 font-semibold">Th√™m nguy√™n v·∫≠t li·ªáu</Typography>
          <div className="grid grid-cols-12 gap-4 items-end">
            <div className="col-span-5">
              <Select
                label="Ch·ªçn nguy√™n v·∫≠t li·ªáu"
                value={selectedMaterial}
                onChange={(value) => setSelectedMaterial(value)}
              >
                {Array.isArray(materials) && materials.length > 0 ? (
                  materials.map((material) => (
                    <Option key={material.materialId} value={material.materialId.toString()}>
                      {material.materialCode} - {material.materialName}
                    </Option>
                  ))
                ) : (
                  <Option disabled>Kh√¥ng c√≥ d·ªØ li·ªáu</Option>
                )}
              </Select>
            </div>
            <div className="col-span-5">
              <Input
                type="number"
                label="S·ªë l∆∞·ª£ng"
                value={quantity}
                onChange={(e) => setQuantity(Number(e.target.value))}
                min="1"
                step="1"
              />
            </div>
            <div className="col-span-2">
              <Button color="green" className="w-full flex items-center justify-center gap-2" onClick={handleAddMaterial}>
                <FaPlus className="h-4 w-4" /> Th√™m
              </Button>
            </div>
          </div>
        </div>

        {/* Danh s√°ch nguy√™n v·∫≠t li·ªáu */}
        <div className="mb-4">
          <Typography variant="small" className="mb-2 font-semibold">Danh s√°ch nguy√™n v·∫≠t li·ªáu</Typography>
          <table className="w-full min-w-max table-auto text-left">
            <thead>
              <tr>
                {["STT", "M√£ NVL", "T√™n NVL", "ƒê∆°n v·ªã", "S·ªë l∆∞·ª£ng", "Thao t√°c"].map((head) => (
                  <th key={head} className="border-b border-blue-gray-100 bg-blue-gray-50 p-4">
                    <Typography variant="small" color="blue-gray" className="font-normal leading-none opacity-70">
                      {head}
                    </Typography>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {productMaterials.length > 0 ? (
                productMaterials.map((item, index) => {
                  const material = item?.material || {}; // üõ† Ki·ªÉm tra n·∫øu `material` b·ªã `undefined`
                  return (
                    <tr key={index} className="even:bg-blue-gray-50/50">
                      <td className="p-4">{index + 1}</td>
                      <td className="p-4">{material.materialCode || "N/A"}</td>
                      <td className="p-4">{material.materialName || "N/A"}</td>
                      <td className="p-4">{material.unitName || "N/A"}</td>
                      <td className="p-4">
                        <Input
                          type="number"
                          value={item.quantity || 0}
                          onChange={(e) => {
                            const updatedMaterials = [...productMaterials];
                            updatedMaterials[index].quantity = Number(e.target.value);
                            setProductMaterials(updatedMaterials);
                          }}
                          min="1"
                          step="1"
                          className="!border-t-blue-gray-200 focus:!border-t-gray-900"
                        />
                      </td>
                      <td className="p-4">
                        <Button
                          color="red"
                          variant="text"
                          size="sm"
                          onClick={() => handleDeleteMaterial(item.material.materialId)}
                          className="flex items-center gap-2"
                        >
                          <FaTrash className="h-3 w-3" /> X√≥a
                        </Button>
                      </td>
                    </tr>
                  );
                })
              ) : (
                <tr>
                  <td colSpan="6" className="p-4 text-center text-gray-500">
                    Ch∆∞a c√≥ nguy√™n v·∫≠t li·ªáu n√†o ƒë∆∞·ª£c th√™m
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>

        <div className="flex justify-end gap-2 mt-4">
          <Button color="gray" onClick={onClose} disabled={loading}>H·ªßy</Button>
          <Button color="blue" onClick={handleSave} disabled={loading}>{loading ? "ƒêang x·ª≠ l√Ω..." : "L∆∞u ƒë·ªãnh m·ª©c"}</Button>
        </div>
      </div>
    </div>
  );
};

export default BillOfMaterialsModal;
